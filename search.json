[{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Differential Spatial Pattern between conditions","text":"DESpace framework identifying spatially variable genes (SVGs), common task spatial transcriptomics analyses, differential spatial variable pattern (DSP) genes, identify differences spatial gene expression patterns across experimental conditions. leveraging pre-annotated spatial clusters summarized spatial information, DESpace models gene expression negative binomial (NB), via edgeR (Robinson, McCarthy, Smyth 2010), spatial clusters covariates. SV genes identified testing significance spatial clusters. detailed guidance detecting SVGs DESpace, refer SVGs vignettes. multi-sample, multi-condition datasets, fit NB model via edgeR (Robinson, McCarthy, Smyth 2010), time use spatial clusters, conditions interactions covariates. DSP genes identified testing interaction spatial clusters conditions. Notably, framework can identify differences also 2 groups. vignette demonstrate perform DSP analyses.","code":""},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load packages","title":"Differential Spatial Pattern between conditions","text":"","code":"suppressMessages({     library(DESpace)     library(ggplot2)     library(SpatialExperiment)     library(muSpaData)     library(reshape2)     library(tidyverse)     library(patchwork)     library(splines)     library(edgeR) }) set.seed(123)"},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Differential Spatial Pattern between conditions","text":"example dataset, consider multi-sample, multi-group spatially resolved transcriptomics data - Stereo-seq dataset taxolotl telencephalon brain regeneration stages (Wei et al. 2022). dataset includes axolotl brain tissues collected various days post-injury (DPI): 2 (3 sections), 5 (3 sections), 10 (3 sections), 15 (4 sections), 20 (3 sections), 30 (1 section) 60 (1 section), removal reproducible portion dorsal pallium left telencephalic hemisphere axolotl. original dataset available download via STOmicsDB, processed dataset (including spatial clusters) can accessed via muSpaData ExperimentHub package.","code":""},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"input-data","dir":"Articles","previous_headings":"Data","what":"Input data","title":"Differential Spatial Pattern between conditions","text":", use subset original data, consisting three distinct regeneration stages: 2, 10 20 DPI, two sections stage. spatial tissues sample annotated via Banksy (Singhal et al. 2024), classifying cells five clusters. cluster annotations stored Banksy_smooth column colData. Additionally, columns sdimx sdimy contain spatial coordinates cells, condition column specifies group (.e., stage) cell belongs .","code":"# Load the small example data spe <- Wei22_example() # The following columns from colData(spe) are specified: coordinates <- c(\"sdimx\", \"sdimy\") # coordinates of cells spatial_cluster <- 'Banksy_smooth' # Banksy spatial clusters condition_col <- 'condition'       # regeneration time phases sample_col <- 'sample_id'          # tissue section id colData(spe) |> head() ## DataFrame with 6 rows and 5 columns ##                    sample_id condition Banksy_smooth     sdimx     sdimy ##                     <factor>  <factor>      <factor> <numeric> <numeric> ## CELL.17879.10DPI_1   10DPI_1     10DPI             4         1      2406 ## CELL.17922.10DPI_1   10DPI_1     10DPI             4        10      2372 ## CELL.17966.10DPI_1   10DPI_1     10DPI             4        29      3090 ## CELL.17976.10DPI_1   10DPI_1     10DPI             4        33      3139 ## CELL.17987.10DPI_1   10DPI_1     10DPI             4        33      2267 ## CELL.17988.10DPI_1   10DPI_1     10DPI             4        37      2791"},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"quality-controlfiltering","dir":"Articles","previous_headings":"Data","what":"Quality control/filtering","title":"Differential Spatial Pattern between conditions","text":"Quality control (QC) procedures cell gene level aim remove low-quality cells, lowly abundant genes. QC, adhere instructions “Orchestrating Spatially Resolved Transcriptomics Analysis Bioconductor” (OSTA). Library size UMI counts used identify low-quality cells. , discard lowly abundant genes detected fewer 20 cells. R scripts performing quality control example dataset can found muSpaData R scripts.","code":""},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"clustering","dir":"Articles","previous_headings":"Data","what":"Clustering","title":"Differential Spatial Pattern between conditions","text":"framework relies spatial clusters accessible successfully summarizing primary spatial characteristics data. datasets, spatial features either accessible can generated spatial clustering algorithms.","code":""},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"manual-annotation","dir":"Articles","previous_headings":"Data > Clustering","what":"Manual annotation","title":"Differential Spatial Pattern between conditions","text":"manual annotation (e.g., annotated pathologist) sample available, can combine samples use manual annotations directly. Note cluster labels must consistent across samples (.e., cluster 1 sample 1 represent tissue cluster 1 sample 2).","code":""},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"spatially-resolved-multi-sample-clustering","dir":"Articles","previous_headings":"Data > Clustering","what":"Spatially resolved (multi-sample) clustering","title":"Differential Spatial Pattern between conditions","text":"manual annotations available, can use spatially resolved clustering tools. methods, jointly employing spatial coordinates gene expression data, enable obtaining spatial clusters. Among others, BayesSpace (Zhao et al. 2021) Banksy (Singhal et al. 2024) allow jointly clustering multiple samples. particular tool specific vignettes multi-sample clustering: BayesSpace vignettes, Banksy vignettes. Details applying Banksy joint clustering example dataset can also found muSpaData R scripts.","code":"# View Banksy clusters  # The spatial cluster assignments are available in the `colData(spe)` CD <- colData(spe) |> as.data.frame() ggplot(CD, aes(x = sdimx, y = sdimy, color = factor(Banksy_smooth))) +     geom_point(size = 0.25) +     facet_wrap(~sample_id, scales = 'free') +     theme_void() +     theme(legend.position = \"bottom\") +     guides(color = guide_legend(override.aes = list(size = 3))) +     labs(color = NULL, title = \"Banksy Spatial Clusters\")"},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"single-sample-clustering","dir":"Articles","previous_headings":"Data > Clustering > Spatially resolved (multi-sample) clustering","what":"Single sample clustering","title":"Differential Spatial Pattern between conditions","text":"benchmarks, noticed , BayesSpace Banksy, joint spatial clustering multiple samples always yield accurate results spatial clustering individual samples. Therefore, multi-sample clustering fails, suggest clustering individual samples (described Section 3 Individual sample SVG Vignette) manually matching cluster ids across samples, ensure “cluster 1” always refers spatial region samples.","code":""},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"dsp-testing","dir":"Articles","previous_headings":"","what":"DSP testing","title":"Differential Spatial Pattern between conditions","text":"spatial clusters, can search DSP conditions. Importantly, clusters identified samples analyzed.","code":""},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"gene-level-test","dir":"Articles","previous_headings":"DSP testing","what":"Gene-level test","title":"Differential Spatial Pattern between conditions","text":"Fit model via dsp_test function. Parameter spe specifies input SpatialExperiment SingleCellExperiment object, cluster_col, sample_col condition_col define column names colData(spe) spatial clusters, sample ids, condition ids, respectively. Set verbose TRUE (default value) view detailed statistics. list results returned, main results interest stored gene_results data frame. frame contains several columns, including gene names (gene_id), log2-fold changes groups (e.g, logFC.condition2DPI.cluster_id1), average (across cells) log-2 counts per million (logCPM), likelihood ratio test statistics (LR), raw p-values (PValue) Benjamini-Hochberg adjusted p-values (FDR). Specifically, column logFC.condition2DPI.cluster_id1 represents difference log2-fold change gene expression 2 DPI cluster 1 relative baseline condition (10 DPI) baseline cluster (cluster 0). words, testing whether spatial structure gene expression (summarized clusters) differs 2 10 DPI. second element results (DGEList object estimated_y) contains estimated common dispersion. third fourth element results (DGEGLM DGELRT objects) contain full statistics edgeR::glmFit edgeR::glmLRT. Visualize gene expression significant genes FeaturePlot(). Note gene names vector feature, also appear count matrix’s row names. Specifying column names spatial coordinates spots necessary named row col. spatial structure gene expression changes across conditions, transitioning localized patterns earlier stages (2 10 DPI) broader distribution later stage (20 DPI).","code":"results <- dsp_test(spe = spe,                     cluster_col = spatial_cluster,                     sample_col = sample_col,                     condition_col = condition_col,                     verbose = TRUE) ## Using 'dsp_test' for spatial variable pattern genes detection. ## Filter low quality clusters: ## Cluster levels to keep: 0, 1, 2, 3, 4 ## Design model: row names represent sample names, followed by underscores and cluster names. ##          (Intercept) condition20DPI condition2DPI cluster_id1 cluster_id2 ## 2DPI_1_0           1              0             1           0           0 ## 2DPI_2_0           1              0             1           0           0 ##          cluster_id3 cluster_id4 condition20DPI:cluster_id1 ## 2DPI_1_0           0           0                          0 ## 2DPI_2_0           0           0                          0 ##          condition2DPI:cluster_id1 condition20DPI:cluster_id2 ## 2DPI_1_0                         0                          0 ## 2DPI_2_0                         0                          0 ##          condition2DPI:cluster_id2 condition20DPI:cluster_id3 ## 2DPI_1_0                         0                          0 ## 2DPI_2_0                         0                          0 ##          condition2DPI:cluster_id3 condition20DPI:cluster_id4 ## 2DPI_1_0                         0                          0 ## 2DPI_2_0                         0                          0 ##          condition2DPI:cluster_id4 ## 2DPI_1_0                         0 ## 2DPI_2_0                         0 head(results$gene_results, 2) ##                       gene_id logFC.condition20DPI.cluster_id1 ## AMEX60DD014721 AMEX60DD014721                      -0.07164635 ## AMEX60DD045083 AMEX60DD045083                       0.08745636 ##                logFC.condition2DPI.cluster_id1 logFC.condition20DPI.cluster_id2 ## AMEX60DD014721                      -0.3898630                       -0.8509553 ## AMEX60DD045083                       0.5417202                       -1.3379152 ##                logFC.condition2DPI.cluster_id2 logFC.condition20DPI.cluster_id3 ## AMEX60DD014721                       0.8526198                       -0.8327653 ## AMEX60DD045083                       1.1227184                        0.2479755 ##                logFC.condition2DPI.cluster_id3 logFC.condition20DPI.cluster_id4 ## AMEX60DD014721                      -0.9450822                        0.2229300 ## AMEX60DD045083                       1.2663910                       -0.9966468 ##                logFC.condition2DPI.cluster_id4   logCPM        LR       PValue ## AMEX60DD014721                       0.2085998 9.344907 102.25832 1.473888e-18 ## AMEX60DD045083                      -0.7966179 7.505402  95.35246 3.791697e-17 ##                         FDR ## AMEX60DD014721 7.369440e-15 ## AMEX60DD045083 9.479243e-14 class(results$estimated_y); class(results$glmLrt); class(results$glmFit) ## [1] \"DGEList\" ## attr(,\"package\") ## [1] \"edgeR\" ## [1] \"NULL\" ## [1] \"DGEGLM\" ## attr(,\"package\") ## [1] \"edgeR\" sample_ids <- levels(CD$sample_id)  # Identify the top DSP (feature <- results$gene_results$gene_id[1]) ## [1] \"AMEX60DD014721\" # Extract the gene_name by matching the gene_id (feature_name <- rowData(spe)$gene_id[   rowData(spe)$gene_name %in% feature ]) ## [1] \"ECM1\" # generate a list of plots plots <- lapply(sample_ids, function(sample_id) {      # Subset spe for each sample   spe_j <- spe[, colData(spe)$sample_id == sample_id]      # Create FeaturePlot for the sample   plot <- FeaturePlot(spe_j, feature,                       coordinates = coordinates,                       platform = \"Stereo-seq\", ncol = 1,                       diverging = TRUE,                       point_size = 0.1, legend_exprs = TRUE) +      theme(legend.position = \"right\",           legend.key.size = unit(0.5, 'cm')) +     labs(color = \"\") + ggtitle(sample_id)       return(plot) }) combined_plot <- wrap_plots(plots, ncol = 3) +      # common legend     plot_layout(guides = 'collect')   combined_plot"},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"individual-cluster-test","dir":"Articles","previous_headings":"DSP testing","what":"Individual cluster test","title":"Differential Spatial Pattern between conditions","text":"DESpace can also used reveal specific areas tissue affected spatial variability; .e., spatial clusters particularly /abundant compared average across conditions. Function individual_dsp() can used identify DSP genes individual cluster. Parameters cluster_col, sample_col condition_col indicate column names colData(spe) spatial clusters, sample ids, condition ids, respectively. individual_dsp() returns list containing results individual cluster tests. Similarly , results cluster presented data.fame, columns contain gene names (gene_id), likelihood ratio test statistics (LR), log2-fold changes (logFC), raw p-values (PValue) Benjamini-Hochberg adjusted p-values (FDR). , present top results cluster 2. logFC.condition20DPI.cluster_id2 represents interaction 20 DPI condition cluster 2. compares effect 20 DPI cluster 2 effect clusters (.e., tissue regions excluding cluster 2, serves baseline). positive log-fold change value suggests , increase gene expression cluster 2 10 DPI (baseline) 20 DPI greater increase gene expression clusters 10 DPI 20 DPI. Visualize gene expression top gene cluster 2.","code":"cluster_results <- individual_dsp(spe,                                   cluster_col = spatial_cluster,                                   sample_col = sample_col,                                   condition_col = condition_col) class(cluster_results) ## [1] \"list\" names(cluster_results) ## [1] \"0\" \"1\" \"2\" \"3\" \"4\" cluster_results$`2` |> head(n = 4) ##                       gene_id logFC.condition20DPI.cluster_id2 ## AMEX60DD014721 AMEX60DD014721                       -0.5801491 ## AMEX60DD014991 AMEX60DD014991                        2.6942759 ## AMEX60DD055246 AMEX60DD055246                       -0.2661447 ## AMEX60DD045083 AMEX60DD045083                       -1.0631435 ##                logFC.condition2DPI.cluster_id2   logCPM       LR       PValue ## AMEX60DD014721                       1.2700494 9.582333 76.16657 2.888278e-17 ## AMEX60DD014991                       3.0151238 7.330327 73.02536 1.389135e-16 ## AMEX60DD055246                      -2.2986026 5.661946 60.91208 5.930751e-14 ## AMEX60DD045083                       0.9065434 8.266790 59.19339 1.400618e-13 ##                         FDR ## AMEX60DD014721 1.444139e-13 ## AMEX60DD014991 3.472837e-13 ## AMEX60DD055246 9.884585e-11 ## AMEX60DD045083 1.750772e-10 # one of top DSPs for cluster 2 (feature <- rownames(cluster_results[[\"2\"]])[4]) ## [1] \"AMEX60DD045083\" # Extract the gene_name by matching the gene_id (feature_name <- rowData(spe)$gene_id[   rowData(spe)$gene_name == feature ]) ## [1] \"SFRP2\""},{"path":[]},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"abundance-trend","dir":"Articles","previous_headings":"DSP testing > Individual cluster test > Visualization","what":"Abundance trend","title":"Differential Spatial Pattern between conditions","text":"One way plot overall abundance SFRP2 cluster-sample combination. null hypothesis, gene expression changes across conditions consistent across clusters. boxplots show average log-CPM cluster 2 clusters (excluding cluster 2) across different stages. Cluster 2, average abundance highest 2 DPI, decreases 10 DPI continues drop 20 DPI. contrast, although slight decrease abundance across clusters, remains relatively constant overall.","code":"# calculate log cpm cps <- cpm(results$estimated_y, log = TRUE) cps_name <- colnames(cps) mdata <- data.frame(     log_cpm = cps[feature, ] ,     Banksy_smooth = factor(sub(\".*_\", \"\", cps_name)),     day = as.numeric(sub(\"([0-9]+)DPI.*\", \"\\\\1\", cps_name)),     sample_id = sub(\"(_[0-9]+)$\", \"\", cps_name) ) plt <- ggplot(mdata, aes(x = factor(day), y = log_cpm)) +     geom_jitter(aes(color = Banksy_smooth), size = 2, width = 0.1) +      geom_boxplot(aes(fill = ifelse(Banksy_smooth == \"2\",                                     \"cluster 2\", \"non-cluster 2\")),                   position = position_dodge(width = 0.8), alpha = 0.5) +     scale_x_discrete(breaks = c(2, 10, 20)) +       scale_fill_manual(values = c(\"#4DAF4A\", \"grey\")) +      labs(title = feature_name, x = \"Days post injury\",           y = \"log-2 counts per million (logCPM)\", fill = \"\",          color = \"Banksy cluster\") +      theme(legend.position = \"right\") # figure plt"},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"spatial-expression","dir":"Articles","previous_headings":"DSP testing > Individual cluster test > Visualization","what":"Spatial expression","title":"Differential Spatial Pattern between conditions","text":"Alternatively, gene expression can visualized physical space FeaturePlot(). cluster outline drawn specifying column names clusters stored colData(spe) vector cluster names via cluster_col cluster. , spatial structure gene expression varies across groups; particular, 2 10 DPI, abundance higher cluster 2 (outlined plot), compared rest tissue, 20 DPI abundance homogeneous.","code":"# generate a list of FeaturePlots plots <- lapply(sample_ids, function(sample_id) {     # Subset spe for each sample     spe_j <- spe[, colData(spe)$sample_id == sample_id]     # Create FeaturePlot for the sample     plot <- FeaturePlot(spe_j, feature,                          cluster_col = spatial_cluster,                         coordinates = coordinates, cluster = '2',                         platform = \"Stereo-seq\",                         diverging = TRUE,                         point_size = 0.1,                         linewidth = 0.6) +         theme(legend.position = \"right\",               legend.key.size = unit(0.5, 'cm')) +         labs(color = \"\") + ggtitle(sample_id)         return(plot) }) combined_plot <- wrap_plots(plots, ncol = 3) +      # common legend     plot_layout(guides = 'collect') # figure combined_plot"},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"smooth-splines-to-model-time","dir":"Articles","previous_headings":"DSP testing","what":"Smooth splines to model time","title":"Differential Spatial Pattern between conditions","text":"DESpace offers flexible framework allows users create custom design matrix. default design matrix model.matrix(~ condition * cluster). , provide example create design matrix using piecewise-cubic splines account effect time. First, create metadata associated samples clusters. cluster level, 3 time phases (.e., day) 2 replicates (.e., `rep``) time point. Instead treating time phases (e.g., 2 DPI, 10 DPI, 20 DPI) categorical variable, can model time trend using smooth spline function. can achieved ns(x, df) function splines package. , x represents predictor variable—time phases (day metadata) case-df specifies degrees freedom, determine total number parameters ns() time model, including intercept. Fit model via dsp_test function. identify key spatial clusters expression changes across conditions, apply smooth spline single-cluster design. Specifically, convert original Banksy clusters two groups: target cluster clusters. apply test global test . Create single-cluster design. Fit single-cluster model via dsp_test.","code":"# all combinations of sample and cluster metadata <- expand.grid(sample_id = levels(spe$sample_id),                         cluster = levels(spe$Banksy_smooth)                         ) |>     # extract time point as 'day' from sample_id      mutate(       day = as.numeric(sub(\"DPI.*\", \"\", sample_id)),       rep = as.numeric(sub(\".*_\", \"\", sample_id))        ) metadata |> head(n = 3) ##   sample_id cluster day rep ## 1    2DPI_1       0   2   1 ## 2    2DPI_2       0   2   2 ## 3   10DPI_1       0  10   1 design_model <- model.matrix(~ cluster * ns(day, df = 2),                               data = metadata) rownames(design_model) <- paste0(metadata$sample_id, \"_\",                                  metadata$cluster) dim(design_model) ## [1] 30 15 design_model |> head(n = 3) ##           (Intercept) cluster1 cluster2 cluster3 cluster4 ns(day, df = 2)1 ## 2DPI_1_0            1        0        0        0        0        0.0000000 ## 2DPI_2_0            1        0        0        0        0        0.0000000 ## 10DPI_1_0           1        0        0        0        0        0.5513298 ##           ns(day, df = 2)2 cluster1:ns(day, df = 2)1 cluster2:ns(day, df = 2)1 ## 2DPI_1_0         0.0000000                         0                         0 ## 2DPI_2_0         0.0000000                         0                         0 ## 10DPI_1_0       -0.2274421                         0                         0 ##           cluster3:ns(day, df = 2)1 cluster4:ns(day, df = 2)1 ## 2DPI_1_0                          0                         0 ## 2DPI_2_0                          0                         0 ## 10DPI_1_0                         0                         0 ##           cluster1:ns(day, df = 2)2 cluster2:ns(day, df = 2)2 ## 2DPI_1_0                          0                         0 ## 2DPI_2_0                          0                         0 ## 10DPI_1_0                         0                         0 ##           cluster3:ns(day, df = 2)2 cluster4:ns(day, df = 2)2 ## 2DPI_1_0                          0                         0 ## 2DPI_2_0                          0                         0 ## 10DPI_1_0                         0                         0 results <- dsp_test(spe,                     design = design_model,                     cluster_col = spatial_cluster,                     sample_col = sample_col,                     condition_col = condition_col,                     verbose = TRUE) # count significant DSP genes (at 5% FDR significance level) res_global <- results$gene_results table(res_global$FDR <= 0.05) ##  ## FALSE  TRUE  ##  4799   201 # example: testing for cluster 2 # convert 5 Banksy clusters into 2 groups: cluster 2 vs. all other clusters new_cluster <- factor(ifelse(spe$Banksy_smooth %in% '2', '2', 'Other')) metadata2 <- expand.grid(sample_id = levels(spe$sample_id),                          cluster = levels(new_cluster)) |>     # extract time point as 'day' from sample_id      mutate(         day = as.numeric(sub(\"DPI.*\", \"\", sample_id)),         rep = as.numeric(sub(\".*_\", \"\", sample_id))        ) # design model for testing the cluster 2 design_model2 <- model.matrix(~ cluster * ns(day, df = 2),                               data = metadata2) rownames(design_model2) <- paste0(metadata2$sample_id, \"_\",                                   metadata2$cluster) design_model2 |> head(n = 3) ##           (Intercept) clusterOther ns(day, df = 2)1 ns(day, df = 2)2 ## 2DPI_1_2            1            0        0.0000000        0.0000000 ## 2DPI_2_2            1            0        0.0000000        0.0000000 ## 10DPI_1_2           1            0        0.5513298       -0.2274421 ##           clusterOther:ns(day, df = 2)1 clusterOther:ns(day, df = 2)2 ## 2DPI_1_2                              0                             0 ## 2DPI_2_2                              0                             0 ## 10DPI_1_2                             0                             0 spe$cluster2 <- new_cluster results2 <- dsp_test(spe,                     design = design_model2,                     cluster_col = \"cluster2\",                     sample_col = sample_col,                     condition_col = condition_col,                     verbose = TRUE) # count significant DSP genes (at 5% FDR significance level) res_global2 <- results2$gene_results table(res_global2$FDR <= 0.05) ##  ## FALSE  TRUE  ##  4955    45 # identify the top DSP for cluster 2 (feature <- results2$gene_results$gene_id[5]) ## [1] \"AMEX60DD002984\" # extract the gene_name by matching the gene_id (feature_name <- rowData(spe)$gene_id[   rowData(spe)$gene_name %in% feature ]) ## [1] \"NEFM\""},{"path":[]},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"predicted-trend","dir":"Articles","previous_headings":"DSP testing > Smooth splines to model time > Visualization","what":"Predicted trend","title":"Differential Spatial Pattern between conditions","text":"explore predicted counts based estimated coefficients, calculate visualize fitted values NEFM. expression NEFM cluster 2 first increase decrease, remaining regions, expression slightly increase time.","code":"fitted_values <- results2[[\"glmFit\"]][[\"fitted.values\"]] m <- melt(fitted_values[feature,]) |>     rownames_to_column(\"row_name_column\") |>     setNames(c(\"sample_id\", \"fitted\")) |>     mutate(         day = as.numeric(sub(\"DPI.*\", \"\", sample_id)),         cluster = as.factor(sub(\".*_\", \"\", sample_id))        ) m |> head(n = 3) ##   sample_id    fitted day cluster ## 1  2DPI_1_2  151.7510   2       2 ## 2  2DPI_2_2  130.8886   2       2 ## 3 10DPI_1_2 1024.0528  10       2 plt <- ggplot(m, aes(x=day, y=fitted, group=cluster, colour = cluster)) +     geom_jitter(size = 3, width = 0.2, height = 0) +     scale_y_sqrt() +      labs(title = feature_name) +     scale_x_continuous(breaks = c(2, 10, 20)) +      xlab(\"Days post injury\") # figure plt"},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"spatial-expression-1","dir":"Articles","previous_headings":"DSP testing > Smooth splines to model time > Visualization","what":"Spatial expression","title":"Differential Spatial Pattern between conditions","text":"Visualize expression top gene, NEFM, across samples. using annotation_cluster = TRUE, cluster annotations displayed expression plots. trend aligns model’s prediction: gene abundance cluster 2 peaks 10 DPI compared clusters.","code":"plots <- lapply(sample_ids, function(sample_id) {     # Subset spe for each sample     spe_j <- spe[, colData(spe)$sample_id == sample_id]     # Create FeaturePlot for the sample     plot <- FeaturePlot(spe_j, feature = feature,                          cluster_col = spatial_cluster,                         coordinates = coordinates,                          platform = \"Stereo-seq\",                         point_size = 0.001,                         diverging = TRUE,                         annotation_cluster = TRUE,                         annotation_title = sample_id)        return(plot) }) combined_plot <- wrap_plots(plots, ncol = 2) +      # common legend     plot_layout(guides = 'collect') combined_plot"},{"path":"https://peicai.github.io/DESpace/articles/DSP.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Differential Spatial Pattern between conditions","text":"","code":"sessionInfo() ## R version 4.5.2 RC (2025-10-27 r88973) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] splines   stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] edgeR_4.8.0                 limma_3.66.0                ##  [3] patchwork_1.3.2             lubridate_1.9.4             ##  [5] forcats_1.0.1               stringr_1.5.2               ##  [7] dplyr_1.1.4                 purrr_1.1.0                 ##  [9] readr_2.1.5                 tidyr_1.3.1                 ## [11] tibble_3.3.0                tidyverse_2.0.0             ## [13] reshape2_1.4.4              muSpaData_1.1.0             ## [15] ExperimentHub_3.0.0         AnnotationHub_4.0.0         ## [17] BiocFileCache_3.0.0         dbplyr_2.5.1                ## [19] SpatialExperiment_1.20.0    SingleCellExperiment_1.32.0 ## [21] SummarizedExperiment_1.40.0 Biobase_2.70.0              ## [23] GenomicRanges_1.62.0        Seqinfo_1.0.0               ## [25] IRanges_2.44.0              S4Vectors_0.48.0            ## [27] BiocGenerics_0.56.0         generics_0.1.4              ## [29] MatrixGenerics_1.22.0       matrixStats_1.5.0           ## [31] ggplot2_4.0.0               DESpace_2.0.0               ## [33] BiocStyle_2.38.0            ##  ## loaded via a namespace (and not attached): ##   [1] RColorBrewer_1.1-3     jsonlite_2.0.0         magrittr_2.0.4         ##   [4] spatstat.utils_3.2-0   magick_2.9.0           farver_2.1.2           ##   [7] rmarkdown_2.30         fs_1.6.6               ragg_1.5.0             ##  [10] vctrs_0.6.5            memoise_2.0.1          spatstat.explore_3.5-3 ##  [13] terra_1.8-70           htmltools_0.5.8.1      S4Arrays_1.10.0        ##  [16] curl_7.0.0             SparseArray_1.10.0     sass_0.4.10            ##  [19] KernSmooth_2.23-26     bslib_0.9.0            htmlwidgets_1.6.4      ##  [22] desc_1.4.3             plyr_1.8.9             httr2_1.2.1            ##  [25] cachem_1.1.0           lifecycle_1.0.4        pkgconfig_2.0.3        ##  [28] Matrix_1.7-4           R6_2.6.1               fastmap_1.2.0          ##  [31] digest_0.6.37          ggnewscale_0.5.2       AnnotationDbi_1.72.0   ##  [34] tensor_1.5.1           textshaping_1.0.4      RSQLite_2.4.3          ##  [37] beachmat_2.26.0        labeling_0.4.3         filelock_1.0.3         ##  [40] timechange_0.3.0       spatstat.sparse_3.1-0  httr_1.4.7             ##  [43] polyclip_1.10-7        abind_1.4-8            compiler_4.5.2         ##  [46] proxy_0.4-27           bit64_4.6.0-1          withr_3.0.2            ##  [49] S7_0.2.0               BiocParallel_1.44.0    DBI_1.2.3              ##  [52] ggforce_0.5.0          MASS_7.3-65            rappdirs_0.3.3         ##  [55] DelayedArray_0.36.0    rjson_0.2.23           classInt_0.4-11        ##  [58] tools_4.5.2            units_1.0-0            goftest_1.2-3          ##  [61] glue_1.8.0             nlme_3.1-168           grid_4.5.2             ##  [64] sf_1.0-21              gtable_0.3.6           spatstat.data_3.1-9    ##  [67] tzdb_0.5.0             class_7.3-23           hms_1.1.4              ##  [70] data.table_1.17.8      XVector_0.50.0         spatstat.geom_3.6-0    ##  [73] BiocVersion_3.22.0     pillar_1.11.1          tweenr_2.0.3           ##  [76] lattice_0.22-7         bit_4.6.0              deldir_2.0-4           ##  [79] tidyselect_1.2.1       locfit_1.5-9.12        Biostrings_2.78.0      ##  [82] scuttle_1.19.0         knitr_1.50             bookdown_0.45          ##  [85] xfun_0.53              statmod_1.5.1          stringi_1.8.7          ##  [88] yaml_2.3.10            evaluate_1.0.5         codetools_0.2-20       ##  [91] BiocManager_1.30.26    cli_3.6.5              systemfonts_1.3.1      ##  [94] jquerylib_0.1.4        Rcpp_1.1.0             spatstat.random_3.4-2  ##  [97] png_0.1-8              spatstat.univar_3.1-4  parallel_4.5.2         ## [100] pkgdown_2.1.3          assertthat_0.2.1       blob_1.2.4             ## [103] scales_1.4.0           e1071_1.7-16           crayon_1.5.3           ## [106] rlang_1.1.6            KEGGREST_1.50.0"},{"path":[]},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"DESpace intuitive framework identifying spatially variable (SV) genes (SVGs) via edgeR (Robinson, McCarthy, Smyth 2010), one common methods performing differential expression analyses. Based pre-annotated spatial clusters summarized spatial information, DESpace models gene expression using negative binomial (NB), via edgeR (Robinson, McCarthy, Smyth 2010), spatial clusters covariates. SV genes (SVGs) identified testing significance spatial clusters. approach assumes spatial structure can summarized spatial clusters, reproduce key features tissue (e.g., white matter layers brain cortex). significant test covariates indicates space influences gene expression, hence identifying spatially variable genes. model flexible robust, significantly faster SV methods. Furthermore, best knowledge, SV approach allows: - performing SV test individual spatial cluster, hence identifying key regions affected spatial variability; - jointly fitting multiple samples, targeting genes consistent spatial patterns across biological replicates. , illustrate en example usage package.","code":""},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"basics","dir":"Articles","previous_headings":"","what":"Basics","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"DESpace implemented R package within Bioconductor, main venue omics analyses, use various Bioconductor packages (e.g., SpatialLIBD, edgeR). DESpace package available Bioconductor can installed following command: development version DESpacecan also installed Bioconductor-devel branch GitHub. access R code used vignettes, type: Questions relative DESpace reported new issue BugReports. cite DESpace, type: Load R packages:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"DESpace\")  ## Check that you have a valid Bioconductor installation BiocManager::valid() browseVignettes(\"DESpace\") citation(\"DESpace\") suppressMessages({     library(DESpace)     library(ggplot2)     library(ggforce)     library(SpatialExperiment) })"},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"example dataset, consider human dorsolateral pre-frontal cortex (DLPFC) spatial transcriptomics dataset 10x Genomics Visium platform, including three neurotypical adult donors (.e., biological replicates), four images per subject (Maynard et al. 2020). full dataset consists 12 samples, can accessed via spatialLIBD Bioconductor package.","code":""},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"input-data","dir":"Articles","previous_headings":"Data","what":"Input data","title":"A framework to discover Spatially Variable genes via spatial clusters","text":", consider subset original data, consisting three biological replicates: 1 image three brain subjects. Initially, Section 3 individual sample , fit approach single sample, whose data stored spe3 whereas 3 samples later jointly used Section 4 Multiple samples. spatial tissues sample manually annotated original manuscript (Maynard et al. 2020), spots labeled one following categories: white matter (WM) layers 1 6. manual annotations stored column layer_guess_reordered colData, columns array_col array_row provide spatial coordinates spots.","code":"# Connect to ExperimentHub ehub <- ExperimentHub::ExperimentHub() # Download the full real data (about 2.1 GB in RAM) use: spe_all <- spatialLIBD::fetch_data(type = \"spe\", eh = ehub) # Specify column names of spatial coordinates in colData(spe)  coordinates <- c(\"array_row\", \"array_col\") # Specify column names of spatial clusters in colData(spe)  cluster_col <- 'layer_guess_reordered' # Remove spots missing annotations spe_all <- spe_all[, !is.na(spe_all[[cluster_col]])] # Create three spe objects, one per sample: spe1 <- spe_all[, colData(spe_all)$sample_id == '151507'] spe2 <- spe_all[, colData(spe_all)$sample_id == '151669'] spe3 <- spe_all[, colData(spe_all)$sample_id == '151673'] rm(spe_all) # Select small set of random genes for faster runtime in this example set.seed(123) sel_genes <- sample(dim(spe1)[1],2000) spe1 <- spe1[sel_genes,] spe2 <- spe2[sel_genes,] spe3 <- spe3[sel_genes,] # For covenience, we use “gene names” instead of “gene ids”: rownames(spe1) <- rowData(spe1)$gene_name rownames(spe2) <- rowData(spe2)$gene_name rownames(spe3) <- rowData(spe3)$gene_name # We select a subset of columns keep_col <- c(coordinates,cluster_col,\"expr_chrM_ratio\",\"cell_count\") head(colData(spe3)[keep_col]) ## DataFrame with 6 rows and 5 columns ##                    array_row array_col layer_guess_reordered expr_chrM_ratio ##                    <integer> <integer>              <factor>       <numeric> ## AAACAAGTATCTCCCA-1        50       102                Layer3        0.166351 ## AAACAATCTACTAGCA-1         3        43                Layer1        0.122376 ## AAACACCAATAACTGC-1        59        19                WM            0.114089 ## AAACAGAGCGACTCCT-1        14        94                Layer3        0.242223 ## AAACAGCTTTCAGAAG-1        43         9                Layer5        0.152174 ## AAACAGGGTCTATATT-1        47        13                Layer6        0.155095 ##                    cell_count ##                     <integer> ## AAACAAGTATCTCCCA-1          6 ## AAACAATCTACTAGCA-1         16 ## AAACACCAATAACTGC-1          5 ## AAACAGAGCGACTCCT-1          2 ## AAACAGCTTTCAGAAG-1          4 ## AAACAGGGTCTATATT-1          6"},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"quality-controlfiltering","dir":"Articles","previous_headings":"Data","what":"Quality control/filtering","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"Quality control (QC) procedures spot gene level aim remove low-quality spots, lowly abundant genes. QC, adhere instructions “Orchestrating Spatially Resolved Transcriptomics Analysis Bioconductor” (OSTA). library size, UMI counts, ratio mitochondrial chromosome (chM) expression, number cells per spot used identify low-quality spots. , discard lowly abundant genes, detected less 20 spots.","code":"# Sample 1: # Calculate per-spot QC metrics and store in colData spe1 <- scuttle::addPerCellQC(spe1,) # Remove combined set of low-quality spots spe1 <- spe1[, !(colData(spe1)$sum < 10 |             # library size                 colData(spe1)$detected < 10 |         # number of expressed genes                 colData(spe1)$expr_chrM_ratio > 0.30| # mitochondrial expression ratio                 colData(spe1)$cell_count > 10)]       # number of cells per spot # Sample 2: # Calculate per-spot QC metrics and store in colData spe2 <- scuttle::addPerCellQC(spe2,) # Remove combined set of low-quality spots spe2 <- spe2[, !(colData(spe2)$sum < 20 |                 colData(spe2)$detected < 15 |                 colData(spe2)$expr_chrM_ratio > 0.35|                 colData(spe2)$cell_count > 8)] # Sample 3: spe3 <- scuttle::addPerCellQC(spe3,) # Remove combined set of low-quality spots spe3 <- spe3[, !(colData(spe3)$sum < 25 |                 colData(spe3)$detected < 25 |                 colData(spe3)$expr_chrM_ratio > 0.3|                 colData(spe3)$cell_count > 15)] # For each sample i: for(i in seq_len(3)){     spe_i <- eval(parse(text = paste0(\"spe\", i)))     # Select QC threshold for lowly expressed genes: at least 20 non-zero spots:     qc_low_gene <- rowSums(assays(spe_i)$counts > 0) >= 20     # Remove lowly abundant genes     spe_i <- spe_i[qc_low_gene,]     assign(paste0(\"spe\", i), spe_i)     message(\"Dimension of spe\", i, \": \", dim(spe_i)[1], \", \", dim(spe_i)[2]) } ## Dimension of spe1: 847, 4169 ## Dimension of spe2: 867, 3610 ## Dimension of spe3: 907, 3584"},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"individual-sample","dir":"Articles","previous_headings":"","what":"Individual sample","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"fit approach discover SVGs individual sample. Section 4 Multiple samples, show jointly embed multiple replicates.","code":""},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"clustering","dir":"Articles","previous_headings":"Individual sample","what":"Clustering","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"framework relies spatial clusters accessible successfully summarizing primary spatial characteristics data. datasets, spatial features either accessible can easily generated spatial clustering algorithms.","code":""},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"manual-annotation","dir":"Articles","previous_headings":"Individual sample > Clustering","what":"Manual annotation","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"manual annotations provided (e.g., annotated pathologist), can directly use . spe spe object contains coordinates spot-level data, can visualize spatial clusters.","code":"# View LIBD layers for one sample CD <- as.data.frame(colData(spe3)) ggplot(CD,      aes(x=array_col,y=array_row,      color=factor(layer_guess_reordered))) +     geom_point() +      theme_void() + scale_y_reverse() +      theme(legend.position=\"bottom\") +      labs(color = \"\", title = paste0(\"Manually annotated spatial clusters\"))"},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"spatially-resolved-clustering","dir":"Articles","previous_headings":"Individual sample > Clustering","what":"Spatially resolved clustering","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"manual annotations available, can use spatially resolved clustering tools. methods, jointly employing spatial coordinates gene expression data, enable obtaining spatial clusters. Although, vignette use pre-computed manually annotated clusters, provide links two popular spatially resolved clustering tools: BayesSpace (Zhao et al. 2021) StLearn (Pham et al. 2020).","code":""},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"bayesspace","dir":"Articles","previous_headings":"Individual sample > Clustering > Spatially resolved clustering","what":"BayesSpace","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"BayesSpace Bioconductor package provides Bayesian statistical approach spatial transcriptomics data clustering (BayesSpace). specific vignette using BayesSpace dataset (human DLPFC) . using BayesSpace, spatial cluster assignments (spatial.cluster) available colData(spe).","code":""},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"stlearn","dir":"Articles","previous_headings":"Individual sample > Clustering > Spatially resolved clustering","what":"StLearn","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"StLearn, python-based package, designed spatial transciptomics data. allows spatially-resolved clustering based Louvain k-means (stLearn). tutorial using StLearn dataset (human DLPFC) . running stLearn, can store results csv file. , can load results R store spatial clusters spe object.","code":"# Save spatial results obsm.to_csv(\"stLearn_clusters.csv\") stLearn_results <- read.csv(\"stLearn_clusters.csv\", sep = ',',                              header = TRUE) # Match colData(spe) and stLearn results stLearn_results <- stLearn_results[match(rownames(colData(spe3)),                                      rownames(stLearn_results)), ] colData(spe3)$stLearn_clusters <- stLearn_results$stLearn_pca_kmeans"},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"sv-testing","dir":"Articles","previous_headings":"Individual sample","what":"SV testing","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"spatial clusters, can search SVGs.","code":""},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"gene-level-test","dir":"Articles","previous_headings":"Individual sample > SV testing","what":"Gene-level test","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"Fit model via svg_test function. Parameter spe specifies input SpatialExperiment SingleCellExperiment object, cluster_col defines column names colData(spe) containing spatial clusters. obtain statistics, set verbose TRUE (default value). list results returned. main results interest stored gene_results: data.fame, columns contain gene names (gene_id), likelihood ratio test statistics (LR), average (across spots) log-2 counts per million (logCPM), raw p-values (PValue) Benjamini-Hochberg adjusted p-values (FDR). second element results (DGEList object estimated_y) contains estimated common dispersion, can later used speed-calculation testing individual clusters. third forth element results (DGEGLM DGELRT objects) contain full statistics edgeR::glmFit edgeR::glmLRT. Visualize gene expression three significant genes FeaturePlot(). Note gene names vector feature, also appear count matrix’s row names. Specifying column names spatial coordinates spots necessary named row col.  Additionally, function FeaturePlot() can draw outline around cluster.","code":"set.seed(123) results <- svg_test(spe = spe3,                         cluster_col = cluster_col,                          verbose = TRUE) ## using 'svg_test' for spatial gene/pattern detection. ## Filter low quality genes: ## min_counts = 20; min_non_zero_spots = 10. ## The number of genes that pass filtering is 907. ## single sample test head(results$gene_results, 3) ##         gene_id       LR   logCPM        PValue           FDR ## SNCG       SNCG 1302.530 14.36227 3.069740e-278 2.784255e-275 ## ATP1A3   ATP1A3 1235.844 14.68931 8.359666e-264 3.791108e-261 ## PLEKHH1 PLEKHH1 1045.524 13.69919 1.272120e-222 3.846044e-220 class(results$estimated_y); class(results$glmLrt); class(results$glmFit) ## [1] \"DGEList\" ## attr(,\"package\") ## [1] \"edgeR\" ## [1] \"DGELRT\" ## attr(,\"package\") ## [1] \"edgeR\" ## [1] \"DGEGLM\" ## attr(,\"package\") ## [1] \"edgeR\" (feature <- results$gene_results$gene_id[seq_len(3)]) ## [1] \"SNCG\"    \"ATP1A3\"  \"PLEKHH1\" FeaturePlot(spe3, feature,              coordinates = coordinates,              ncol = 3, title = TRUE) FeaturePlot(spe3, feature,              coordinates = coordinates,              annotation_cluster = TRUE,             cluster_col = cluster_col,              cluster = 'all', title = TRUE)"},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"individual-cluster-test","dir":"Articles","previous_headings":"Individual sample > SV testing","what":"Individual cluster test","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"DESpace can also used reveal specific areas tissue affected spatial variability; .e., spatial clusters particularly /abundant compared average. Function individual_svg() can used identify SVGs individual cluster. Parameter cluster_col indicates column names colData(spe) containing spatial clusters. every spatial cluster test, edgeR normally re-compute dispersion estimates based specific design test. However, calculation represents majority overall computing time. Therefore, speed-calculations, propose use dispersion estimates previously computed gene-level tests. Albeit approximation, benchmarks, leads comparable performance terms sensitivity specificity. want use pre-computed gene-level dispersion estimates, set edgeR_y estimated_y. Alternatively, want re-compute dispersion estimates (significantly slower, marginally accurate option), leave edgeR_y empty. individual_svg() returns list containing results individual cluster tests. Similarly , cluster, results reported data.fame, columns contain gene names (gene_id), likelihood ratio test statistics (LR), log2-fold changes (logFC), raw p-values (PValue) Benjamini-Hochberg adjusted p-values (FDR). NB: logFC compares cluster rest tissue; e.g., logFC 2 WM test indicates average gene expression WM (4 times) higher average gene expression non-WM tissue. Visualize results WM. top_results function can used combine gene-cluster-level results. default, results top_results() report adjusted p-values log2-FC; however, users can also choose report either, specifying select = \"FDR\" select = \"logFC\". , gene_PValue gene_FDR columns refer gene-level testing, subsequent columns indicate cluster-specific results. can specify cluster check top genes detected DESpace. high_low parameter, can filter genes visualize higher (high_low = \"high\") lower (high_low = \"low\") average abundance specified cluster, compared average abundance rest tissue. default, high_low = “” results provided. present highly abundant cluster SVGs; .e., SVGs higher expression WM compared rest area. visualize lowly abundant cluster SVGs; .e., SVGs lower expression WM compared rest area. Visualize gene expression top genes layer WM. cluster outline can drawn specifying column names clusters stored colData(spe) vector cluster names via cluster_col cluster.","code":"set.seed(123) cluster_results <- individual_svg(spe3,                                      edgeR_y = results$estimated_y,                                     cluster_col = cluster_col) ## Filter low quality genes: ## min_counts = 20; min_non_zero_spots = 10. ## The number of genes that pass filtering is907. ## Pre-processing ## Start modeling ## Returning results class(cluster_results) ## [1] \"list\" names(cluster_results) ## [1] \"Layer1\" \"Layer2\" \"Layer3\" \"Layer4\" \"Layer5\" \"Layer6\" \"WM\" merge_res <- top_results(results$gene_results, cluster_results) head(merge_res,3) ##   gene_id  gene_LR gene_logCPM   gene_Pvalue      gene_FDR   Layer1_FDR ## 1    SNCG 1302.530    14.36227 3.069740e-278 2.784255e-275 4.643298e-13 ## 2  ATP1A3 1235.844    14.68931 8.359666e-264 3.791108e-261 3.932084e-15 ## 3 PLEKHH1 1045.524    13.69919 1.272120e-222 3.846044e-220 6.916994e-15 ##     Layer2_FDR   Layer3_FDR   Layer4_FDR   Layer5_FDR   Layer6_FDR ## 1 2.808758e-06 8.458841e-80 7.609621e-13 2.924813e-26 1.929238e-65 ## 2 2.024939e-03 5.098986e-60 6.777609e-12 1.448142e-15 7.997262e-25 ## 3 1.210530e-06 6.447729e-44 1.058234e-06 4.481614e-17 3.190429e-01 ##          WM_FDR Layer1_logFC Layer2_logFC Layer3_logFC Layer4_logFC ## 1 3.571838e-133   -0.7714249   -0.4604275    0.8320115    0.6135086 ## 2 2.066457e-182   -0.6342199    0.2225215    0.5509819    0.4556480 ## 3 7.857746e-209   -1.4032823   -0.7711668   -1.1047479   -0.8702769 ##   Layer5_logFC Layer6_logFC  WM_logFC ## 1    0.5492233   -1.0925799 -1.966911 ## 2    0.3252717   -0.4761104 -1.728962 ## 3   -0.8053808   -0.1317911  2.320300 merge_res <- top_results(results$gene_results, cluster_results,                          select = \"FDR\") head(merge_res,3) ##   gene_id  gene_LR gene_logCPM   gene_Pvalue      gene_FDR   Layer1_FDR ## 1    SNCG 1302.530    14.36227 3.069740e-278 2.784255e-275 4.643298e-13 ## 2  ATP1A3 1235.844    14.68931 8.359666e-264 3.791108e-261 3.932084e-15 ## 3 PLEKHH1 1045.524    13.69919 1.272120e-222 3.846044e-220 6.916994e-15 ##     Layer2_FDR   Layer3_FDR   Layer4_FDR   Layer5_FDR   Layer6_FDR ## 1 2.808758e-06 8.458841e-80 7.609621e-13 2.924813e-26 1.929238e-65 ## 2 2.024939e-03 5.098986e-60 6.777609e-12 1.448142e-15 7.997262e-25 ## 3 1.210530e-06 6.447729e-44 1.058234e-06 4.481614e-17 3.190429e-01 ##          WM_FDR ## 1 3.571838e-133 ## 2 2.066457e-182 ## 3 7.857746e-209 # Check top genes for WM results_WM <- top_results(cluster_results = cluster_results,                          cluster = \"WM\") head(results_WM, 3) ##         Cluster gene_id Cluster_LR Cluster_logCPM Cluster_logFC Cluster_PValue ## PLEKHH1      WM PLEKHH1   964.6524       13.69919      2.320300  8.663446e-212 ## ATP1A3       WM  ATP1A3   841.7339       14.68931     -1.728962  4.556686e-185 ## SLAIN1       WM  SLAIN1   723.0543       13.78576      1.870661  2.900809e-159 ##           Cluster_FDR ## PLEKHH1 7.857746e-209 ## ATP1A3  2.066457e-182 ## SLAIN1  8.770113e-157 results_WM_both <- top_results(cluster_results = cluster_results,                                  cluster = \"WM\",                                  high_low = \"both\") head(results_WM_both$high_genes, 3) ##         Cluster gene_id Cluster_LR Cluster_logCPM Cluster_logFC Cluster_PValue ## PLEKHH1      WM PLEKHH1   964.6524       13.69919      2.320300  8.663446e-212 ## SLAIN1       WM  SLAIN1   723.0543       13.78576      1.870661  2.900809e-159 ## CMTM5        WM   CMTM5   659.0630       13.65302      2.098509  2.388407e-145 ##           Cluster_FDR ## PLEKHH1 7.857746e-209 ## SLAIN1  8.770113e-157 ## CMTM5   4.332571e-143 head(results_WM_both$low_genes, 3) ##         Cluster gene_id Cluster_LR Cluster_logCPM Cluster_logFC Cluster_PValue ## ATP1A3       WM  ATP1A3   841.7339       14.68931     -1.728962  4.556686e-185 ## PRKAR1B      WM PRKAR1B   669.2011       14.72797     -1.505987  1.490527e-147 ## NSF          WM     NSF   628.9241       14.50629     -1.745008  8.566920e-139 ##           Cluster_FDR ## ATP1A3  2.066457e-182 ## PRKAR1B 3.379770e-145 ## NSF     1.295033e-136 # SVGs with higher than average abundance in WM feature <- rownames(results_WM_both$high_genes)[seq_len(3)] FeaturePlot(spe3, feature, cluster_col = cluster_col,              coordinates = coordinates, cluster = 'WM',              legend_cluster = TRUE, annotation_cluster = TRUE,              linewidth = 0.6, title = TRUE) # SVGs with lower than average abundance in WM feature <- rownames(results_WM_both$low_genes)[seq_len(3)] FeaturePlot(spe3, feature, cluster_col = cluster_col,              coordinates = coordinates, cluster = 'WM',              legend_cluster = TRUE, annotation_cluster = TRUE,              linewidth = 0.6,title = TRUE)"},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"multiple-samples","dir":"Articles","previous_headings":"","what":"Multiple samples","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"biological replicates available, framework allows jointly modeling target SVGs coherent spatial patterns across samples. approach may particularly beneficial data characterized large degree (biological technical) variability, cancer. Importantly, genes detected (filtering thresholds) samples analyzed.","code":""},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"clustering-1","dir":"Articles","previous_headings":"Multiple samples","what":"Clustering","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"Similar gene-level testing, multi-sample extension requires pre-annotated spatial clusters.","code":""},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"manual-annotation-1","dir":"Articles","previous_headings":"Multiple samples > Clustering","what":"Manual annotation","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"manual annotation sample available, can combine samples use manual annotations directly. Note cluster labels must consistent across samples (.e., WM sample 1 represent tissue WM sample 2). spe.combined object contains coordinates spot-level data, can visualize spatial clusters.","code":"set.seed(123) # Use common genes a <- rownames(counts(spe1));  b <- rownames(counts(spe2));  c <- rownames(counts(spe3)) # find vector of common genes across all samples: CommonGene <- Reduce(intersect, list(a,b,c)) spe1 <- spe1[CommonGene,] spe2 <- spe2[CommonGene,] spe3 <- spe3[CommonGene,]  # Combine three samples spe.combined <- cbind(spe1, spe2, spe3, deparse.level = 1) ggplot(as.data.frame(colData(spe.combined)),      aes(x=array_col, y=array_row,     color=factor(layer_guess_reordered))) +     geom_point() +      facet_wrap(~sample_id) +     theme_void() + scale_y_reverse() +     theme(legend.position=\"bottom\") +      labs(color = \"\", title = \"Manually annotated spatial clusters\")"},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"spatially-resolved-multi-sample-clustering","dir":"Articles","previous_headings":"Multiple samples > Clustering","what":"Spatially resolved (multi-sample) clustering","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"Similarly , manual annotations available, can use spatially resolved clustering tools. BayesSpace (Zhao et al. 2021) StLearn (Pham et al. 2020) allow jointly clustering multiple samples. particular tool specific vignettes multi-testing clustering: BayesSpace vignettes, stLearn vignettes.","code":""},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"single-sample-clustering","dir":"Articles","previous_headings":"Multiple samples > Clustering > Spatially resolved (multi-sample) clustering","what":"Single sample clustering","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"benchmarks, noticed , BayesSpace StLearn, joint spatial clustering multiple samples prone failure inaccurate results spatial clustering individual samples. Therefore, multi-sample clustering fails, suggest trying cluster individual samples (Section 3 Individual sample) manually match cluster ids across samples, ensure “cluster 1” always refers spatial region samples.","code":""},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"sv-testing-1","dir":"Articles","previous_headings":"Multiple samples","what":"SV testing","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"spatial clusters multiple samples, add colData(spe.combined) column layer_guess_reordered fit model spatial clusters covariates.","code":""},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"gene-level-test-1","dir":"Articles","previous_headings":"Multiple samples > SV testing","what":"Gene-level test","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"Fit model via svg_test(). Parameter spe specifies input SpatialExperiment SingleCellExperiment object, cluster_col sample_col define column names colData(spe) containing spatial clusters sample ids. replicates = TRUE, fit multi-sample model. second element result (DGEList object estimated_y_multi) contains estimated common dispersion multi-sample case. list results returned. main results interest stored gene_results. second element results (DGEList object estimated_y) contains estimated common dispersion, can later used speed-calculation testing individual clusters. sample, can visualize gene expression significant SVGs. Note column names spatial coordinates spots row col.","code":"set.seed(123) multi_results <- svg_test(spe = spe.combined,                                 cluster_col = cluster_col,                                 sample_col = 'sample_id',                                 replicates = TRUE) ## using 'svg_test' for spatial gene/pattern detection. ## Filter low quality genes: ## min_counts = 20; min_non_zero_spots = 10. ## The number of genes that pass filtering is 827. ## multi-sample test ## Repeated column names found in count matrix head(multi_results$gene_results,3) ##        gene_id       LR   logCPM PValue FDR ## HPCAL1  HPCAL1 2063.951 14.41886      0   0 ## NSF        NSF 1524.989 14.70448      0   0 ## ATP1A3  ATP1A3 1578.196 14.88558      0   0 class(multi_results$estimated_y) ## [1] \"DGEList\" ## attr(,\"package\") ## [1] \"edgeR\" ## Top three spatially variable genes feature <- multi_results$gene_results$gene_id[seq_len(3)]; feature ## [1] \"HPCAL1\" \"NSF\"    \"ATP1A3\" ## Sample names samples <- unique(colData(spe.combined)$sample_id); samples ## [1] \"151507\" \"151669\" \"151673\" ## Use purrr::map to combine multiple figures spot_plots <- purrr::map(seq_along(samples), function(j) {     ## Subset spe for each sample j     spe_j <- spe.combined[, colData(spe.combined)$sample_id == samples[j] ]     ## Store three gene expression plots with gene names in `feature` for spe_j     spot_plots <- FeaturePlot(spe_j, feature,                              coordinates = coordinates,                             cluster_col = cluster_col, title = TRUE,                             annotation_cluster = TRUE, legend_cluster = TRUE)     return(spot_plots) }) patchwork::wrap_plots(spot_plots, ncol=1)"},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"individual-cluster-test-1","dir":"Articles","previous_headings":"Multiple samples > SV testing","what":"Individual cluster test","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"Similarly shown Section 3 Individual sample, framework can discover key SV spatial clusters also jointly fitting multiple samples. multi-sample testing, set replicates = TRUE individual_svg(). individual_svg() returns list containing results individual clusters, specified cluster parameter. case, logFC refers log2-FC average abundance, across samples, spatial cluster average abundance remaining clusters (e.g., WM vs. non-WM tissue). Visualize results WM. , top_results function can used combine gene-level cluster-level results. can select cluster interest, check top genes detected cluster. high_low = \"\", can filter genes visualize highly lowly abundant SVGs. present highly abundant cluster SVGs; .e., SVGs higher expression WM compared rest tissue. visualize lowly abundant cluster SVGs; .e., SVGs lower expression WM compared rest tissue. Visualize gene expression top three genes layer WM.","code":"set.seed(123) cluster_results <- individual_svg(spe.combined,                                  edgeR_y = multi_results$estimated_y,                                 replicates = TRUE,                                  cluster_col = cluster_col) ## Filter low quality genes: ## min_counts = 20; min_non_zero_spots = 10. ## The number of genes that pass filtering is827. ## Pre-processing ## Start modeling ## Returning results class(cluster_results) ## [1] \"list\" names(cluster_results) ## [1] \"Layer1\" \"Layer2\" \"Layer3\" \"Layer4\" \"Layer5\" \"Layer6\" \"WM\" merge_res <- top_results(multi_results$gene_results, cluster_results,                          select = \"FDR\") head(merge_res,3) ##   gene_id  gene_LR gene_logCPM gene_Pvalue gene_FDR    Layer1_FDR    Layer2_FDR ## 1  ATP1A3 1578.196    14.88558           0        0  1.984383e-93  2.062544e-02 ## 2  HPCAL1 2063.951    14.41886           0        0  4.528139e-15 1.888747e-191 ## 3     NSF 1524.989    14.70448           0        0 5.199695e-127  4.090085e-01 ##      Layer3_FDR   Layer4_FDR    Layer5_FDR   Layer6_FDR        WM_FDR ## 1  3.677009e-16 1.916312e-23  1.722978e-46 4.968132e-03 8.769877e-194 ## 2 4.842541e-126 7.539843e-51 1.024299e-117 3.514907e-15  8.846709e-39 ## 3  4.327942e-01 1.896550e-24  3.643074e-60 1.000256e-01 3.073861e-147 # Check top genes for WM results_WM <- top_results(cluster_results = cluster_results,                          cluster = \"WM\") # For each gene, adjusted p-values for each cluster head(results_WM,3) ##         Cluster gene_id Cluster_LR Cluster_logCPM Cluster_logFC Cluster_PValue ## PLEKHH1      WM PLEKHH1   933.0257       14.00544      1.725113  6.494982e-205 ## ATP1A3       WM  ATP1A3   893.8603       14.88558     -1.285887  2.120889e-196 ## SNCG         WM    SNCG   770.7869       14.60584     -1.597403  1.212461e-169 ##           Cluster_FDR ## PLEKHH1 5.371350e-202 ## ATP1A3  8.769877e-194 ## SNCG    3.342351e-167 results_WM_both <- top_results(cluster_results = cluster_results,                              cluster = \"WM\", high_low = \"both\") head(results_WM_both$high_genes,3) ##         Cluster gene_id Cluster_LR Cluster_logCPM Cluster_logFC Cluster_PValue ## PLEKHH1      WM PLEKHH1   933.0257       14.00544      1.725113  6.494982e-205 ## SLAIN1       WM  SLAIN1   660.4551       14.07042      1.407398  1.189483e-145 ## CMTM5        WM   CMTM5   617.2549       13.99119      1.479961  2.956671e-136 ##           Cluster_FDR ## PLEKHH1 5.371350e-202 ## SLAIN1  1.639503e-143 ## CMTM5   3.493095e-134 head(results_WM_both$low_genes,3) ##         Cluster gene_id Cluster_LR Cluster_logCPM Cluster_logFC Cluster_PValue ## ATP1A3       WM  ATP1A3   893.8603       14.88558     -1.285887  2.120889e-196 ## SNCG         WM    SNCG   770.7869       14.60584     -1.597403  1.212461e-169 ## PRKAR1B      WM PRKAR1B   703.9767       14.89242     -1.135692  4.082649e-155 ##           Cluster_FDR ## ATP1A3  8.769877e-194 ## SNCG    3.342351e-167 ## PRKAR1B 8.440878e-153 # SVGs with higher abundance in WM, than in non-WM tissue feature_high <- rownames(results_WM_both$high_genes)[seq_len(3)] # SVGs with lower abundance in WM, than in non-WM tissue feature_low <- rownames(results_WM_both$low_genes)[seq_len(3)] plot_list_high <- list(); plot_list_low <- list() ## Sample names samples <- unique(colData(spe.combined)$sample_id) for(j in seq_along(samples)){     ## Subset spe for each sample j     spe_j <- spe.combined[, colData(spe.combined)$sample_id == samples[j]]     ## Gene expression plots with top highly abundant cluster SVGs for spe_j     plot_list_high[[j]] <- FeaturePlot(spe_j, feature_high,                                  coordinates = coordinates,                                 cluster_col = cluster_col,                                  linewidth = 0.6,                                 cluster = 'WM', annotation_cluster = TRUE,                                 legend_cluster = TRUE, title = TRUE)     ## Gene expression plots with top lowly abundant cluster SVGs for spe_j     plot_list_low[[j]] <- FeaturePlot(spe_j, feature_low,                                  coordinates = coordinates,                                 cluster_col = cluster_col,                                  linewidth = 0.6,                                 cluster = 'WM', annotation_cluster = TRUE,                                 legend_cluster = TRUE, title = TRUE) } # Expression plots for SVGs with higher abundance in WM, than in non-WM tissue patchwork::wrap_plots(plot_list_high, ncol=1) # Expression plots for SVGs with lower abundance in WM, than in non-WM tissue patchwork::wrap_plots(plot_list_low, ncol=1)"},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"sample-specific-covariates-e-g--batch-effects","dir":"Articles","previous_headings":"Multiple samples > SV testing","what":"Sample-specific covariates (e.g., batch effects)","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"sample-specific covariates, batch effects, available, can account DESpace. adjustment works edgeR original framework: mean negative binomial model expressed function spatial clusters, additional nuisance covariates; differential testing performed spatial clusters , identify SVGs. Note sample-specific covariates can used instead samples, joint modelling samples (sample-specific) covariates possible two variables nested. show example application, artificially separate samples 2 batches: Analyses performed, explained , Section 5; yet, running svg_test, set sample_col batch_id:","code":"spe.combined$batch_id = ifelse(spe.combined$sample_id == \"151507\", \"batch_1\", \"batch_2\")  table(spe.combined$batch_id, spe.combined$sample_id) ##           ##           151507 151669 151673 ##   batch_1   4169      0      0 ##   batch_2      0   3610   3584 set.seed(123) batch_results <- svg_test(spe = spe.combined,                                 cluster_col = cluster_col,                                 sample_col = 'batch_id',                                 replicates = TRUE)"},{"path":"https://peicai.github.io/DESpace/articles/SVG.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"A framework to discover Spatially Variable genes via spatial clusters","text":"","code":"sessionInfo() ## R version 4.5.2 RC (2025-10-27 r88973) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] SpatialExperiment_1.20.0    SingleCellExperiment_1.32.0 ##  [3] SummarizedExperiment_1.40.0 Biobase_2.70.0              ##  [5] GenomicRanges_1.62.0        Seqinfo_1.0.0               ##  [7] IRanges_2.44.0              S4Vectors_0.48.0            ##  [9] BiocGenerics_0.56.0         generics_0.1.4              ## [11] MatrixGenerics_1.22.0       matrixStats_1.5.0           ## [13] ggforce_0.5.0               ggplot2_4.0.0               ## [15] DESpace_2.0.0               BiocStyle_2.38.0            ##  ## loaded via a namespace (and not attached): ##   [1] later_1.4.4              BiocIO_1.20.0            bitops_1.0-9             ##   [4] filelock_1.0.3           tibble_3.3.0             polyclip_1.10-7          ##   [7] XML_3.99-0.19            lifecycle_1.0.4          httr2_1.2.1              ##  [10] sf_1.0-21                edgeR_4.8.0              doParallel_1.0.17        ##  [13] lattice_0.22-7           MASS_7.3-65              magrittr_2.0.4           ##  [16] limma_3.66.0             plotly_4.11.0            sass_0.4.10              ##  [19] rmarkdown_2.30           jquerylib_0.1.4          yaml_2.3.10              ##  [22] httpuv_1.6.16            otel_0.2.0               sessioninfo_1.2.3        ##  [25] spatstat.sparse_3.1-0    cowplot_1.2.0            DBI_1.2.3                ##  [28] RColorBrewer_1.1-3       golem_0.5.1              abind_1.4-8              ##  [31] purrr_1.1.0              RCurl_1.98-1.17          tweenr_2.0.3             ##  [34] rappdirs_0.3.3           circlize_0.4.16          ggrepel_0.9.6            ##  [37] irlba_2.3.5.1            spatstat.utils_3.2-0     terra_1.8-70             ##  [40] units_1.0-0              goftest_1.2-3            spatstat.random_3.4-2    ##  [43] pkgdown_2.1.3            codetools_0.2-20         DelayedArray_0.36.0      ##  [46] DT_0.34.0                scuttle_1.19.0           tidyselect_1.2.1         ##  [49] shape_1.4.6.1            farver_2.1.2             viridis_0.6.5            ##  [52] ScaledMatrix_1.18.0      shinyWidgets_0.9.0       BiocFileCache_3.0.0      ##  [55] spatstat.explore_3.5-3   GenomicAlignments_1.46.0 jsonlite_2.0.0           ##  [58] BiocNeighbors_2.4.0      GetoptLong_1.0.5         e1071_1.7-16             ##  [61] scater_1.38.0            iterators_1.0.14         systemfonts_1.3.1        ##  [64] foreach_1.5.2            tools_4.5.2              ggnewscale_0.5.2         ##  [67] ragg_1.5.0               Rcpp_1.1.0               glue_1.8.0               ##  [70] gridExtra_2.3            SparseArray_1.10.0       xfun_0.53                ##  [73] dplyr_1.1.4              withr_3.0.2              BiocManager_1.30.26      ##  [76] fastmap_1.2.0            rsvd_1.0.5               digest_0.6.37            ##  [79] R6_2.6.1                 mime_0.13                textshaping_1.0.4        ##  [82] colorspace_2.1-2         tensor_1.5.1             spatstat.data_3.1-9      ##  [85] RSQLite_2.4.3            cigarillo_1.0.0          config_0.3.2             ##  [88] tidyr_1.3.1              data.table_1.17.8        rtracklayer_1.70.0       ##  [91] class_7.3-23             httr_1.4.7               htmlwidgets_1.6.4        ##  [94] S4Arrays_1.10.0          pkgconfig_2.0.3          gtable_0.3.6             ##  [97] blob_1.2.4               ComplexHeatmap_2.26.0    S7_0.2.0                 ## [100] XVector_0.50.0           htmltools_0.5.8.1        bookdown_0.45            ## [103] clue_0.3-66              scales_1.4.0             attempt_0.3.1            ## [106] png_0.1-8                spatstat.univar_3.1-4    knitr_1.50               ## [109] rjson_0.2.23             nlme_3.1-168             curl_7.0.0               ## [112] proxy_0.4-27             cachem_1.1.0             GlobalOptions_0.1.2      ## [115] stringr_1.5.2            BiocVersion_3.22.0       KernSmooth_2.23-26       ## [118] vipor_0.4.7              parallel_4.5.2           AnnotationDbi_1.72.0     ## [121] restfulr_0.0.16          desc_1.4.3               pillar_1.11.1            ## [124] grid_4.5.2               vctrs_0.6.5              promises_1.4.0           ## [127] BiocSingular_1.26.0      dbplyr_2.5.1             beachmat_2.26.0          ## [130] xtable_1.8-4             cluster_2.1.8.1          beeswarm_0.4.0           ## [133] paletteer_1.6.0          evaluate_1.0.5           magick_2.9.0             ## [136] Rsamtools_2.26.0         cli_3.6.5                locfit_1.5-9.12          ## [139] compiler_4.5.2           rlang_1.1.6              crayon_1.5.3             ## [142] labeling_0.4.3           classInt_0.4-11          rematch2_2.1.2           ## [145] ggbeeswarm_0.7.2         fs_1.6.6                 stringi_1.8.7            ## [148] viridisLite_0.4.2        deldir_2.0-4             BiocParallel_1.44.0      ## [151] assertthat_0.2.1         Biostrings_2.78.0        lazyeval_0.2.2           ## [154] spatstat.geom_3.6-0      Matrix_1.7-4             ExperimentHub_3.0.0      ## [157] benchmarkme_1.0.8        patchwork_1.3.2          bit64_4.6.0-1            ## [160] KEGGREST_1.50.0          statmod_1.5.1            shiny_1.11.1             ## [163] AnnotationHub_4.0.0      memoise_2.0.1            bslib_0.9.0              ## [166] benchmarkmeData_1.0.4    bit_4.6.0                spatialLIBD_1.21.6"},{"path":[]},{"path":"https://peicai.github.io/DESpace/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peiying Cai. Author, maintainer. Simone Tiberi. Author.","code":""},{"path":"https://peicai.github.io/DESpace/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Peiying Cai, Mark D. Robinson, Simone Tiberi (2024). DESpace: spatially variable gene detection via differential expression testing spatial clusters. Bioinformatics. URL https://doi.org/10.1093/bioinformatics/btae027 Peiying Cai, Mark D. Robinson, Simone Tiberi (2025). DESpace2: detection differential spatial patterns spatial omics data. bioRxiv. URL https://www.biorxiv.org/content/early/2025/07/02/2025.06.30.662268","code":"@Article{,   title = {DESpace: spatially variable gene detection via differential expression testing of spatial clusters},   author = {Peiying Cai and Mark D. Robinson and Simone Tiberi},   eprint = {https://doi.org/10.1093/bioinformatics/btae027},   journal = {Bioinformatics},   year = {2024},   url = {https://doi.org/10.1093/bioinformatics/btae027},   publisher = {Oxford University Press}, } @Article{,   title = {DESpace2: detection of differential spatial patterns in spatial omics data},   author = {Peiying Cai and Mark D. Robinson and Simone Tiberi},   eprint = {https://www.biorxiv.org/content/early/2025/07/02/2025.06.30.662268.full.pdf},   journal = {bioRxiv},   year = {2025},   url = {https://www.biorxiv.org/content/early/2025/07/02/2025.06.30.662268},   publisher = {Cold Spring Harbor Laboratory}, }"},{"path":"https://peicai.github.io/DESpace/index.html","id":"despace-a-framework-to-discover-spatially-variable-genes-and-differential-spatial-patterns-across-conditions","dir":"","previous_headings":"","what":"DESpace: a framework to discover spatially variable genes and differential spatial patterns across conditions","title":"DESpace: a framework to discover spatially variable genes and differential spatial patterns across conditions","text":"DESpace framework identifying spatially variable genes (SVGs), common task spatial transcriptomics analyses, differential spatial variable pattern (DSP) genes, identify differences spatial gene expression patterns across experimental conditions. leveraging pre-annotated spatial clusters summarized spatial information, DESpace models gene expression negative binomial (NB), via edgeR, spatial clusters covariates. SV genes identified testing significance spatial clusters. multi-sample, multi-condition datasets, fit NB model via edgeR, time use spatial clusters, conditions interactions covariates. DSP genes identified testing interaction spatial clusters conditions. Check vignettes description main conceptual mathematical aspects, well usage guidelines. Peiying Cai, Mark D. Robinson, Simone Tiberi (2024). DESpace: spatially variable gene detection via differential expression testing spatial clusters. Bioinformatics. Available Peiying Cai, Mark D. Robinson, Simone Tiberi (2025). DESpace2: detection differential spatial patterns spatial omics data. bioRxiv preprint. Available ","code":""},{"path":"https://peicai.github.io/DESpace/index.html","id":"bioconductor-installation","dir":"","previous_headings":"","what":"Bioconductor installation","title":"DESpace: a framework to discover spatially variable genes and differential spatial patterns across conditions","text":"DESpace available Bioconductor can installed command:","code":"if (!requireNamespace(\"BiocManager\", quietly=TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"DESpace\")"},{"path":"https://peicai.github.io/DESpace/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"DESpace: a framework to discover spatially variable genes and differential spatial patterns across conditions","text":"vignette illustrating use package can accessed Bioconductor R via: ","code":"vignette(\"DESpace\") browseVignettes(\"DESpace\")"},{"path":"https://peicai.github.io/DESpace/reference/DESpace.html","id":null,"dir":"Reference","previous_headings":"","what":"DESpace: A package for identifying spatially variable genes — DESpace","title":"DESpace: A package for identifying spatially variable genes — DESpace","text":"intuitive framework identifying spatially variable genes (SVGs) differential spatial pattern (DSP) genes via edgeR, one common methods performing differential expression analyses.","code":""},{"path":"https://peicai.github.io/DESpace/reference/DESpace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DESpace: A package for identifying spatially variable genes — DESpace","text":"Based pre-annotated spatial clusters summarized spatial information, DESpace models gene expression using negative binomial (NB), via edgeR, spatial clusters covariates. SVGs identified testing significance spatial clusters, whereas DSP genes identified testing significance interaction terms spatial clusters conditions (e.g., treatment conditions time phases). approach assumes spatial structure can summarized spatial clusters, reproduce key features tissue (e.g., white matter layers brain cortex). spatial clusters therefore taken proxy actual spatial distribution; significant test covariates indicates space influences gene expression, hence identifying spatially variable genes. model flexible robust, significantly faster SV methods. Furthermore, best knowledge, SV approach allows: - performing SV test individual spatial cluster, hence identifying key regions affected spatial variability; - jointly fitting multiple samples, targeting genes consistent spatial patterns across replicates. overview functionality provided package, please see vignette: vignette(\"DESpace\", package=\"DESpace\")","code":""},{"path":[]},{"path":"https://peicai.github.io/DESpace/reference/DESpace.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DESpace: A package for identifying spatially variable genes — DESpace","text":"Peiying Cai peiying.cai@uzh.ch, Simone Tiberi simone.tiberi@unibo.","code":""},{"path":"https://peicai.github.io/DESpace/reference/FeaturePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"FeaturePlot — FeaturePlot","title":"FeaturePlot — FeaturePlot","text":"Plot spatial gene expression. function modified version featurePlot function `BayesSpace` R package. comparison original BayesSpace function, function allows plotting multiple genes simultaneously drawing outline around specified cluster. draw outlines, reconstructShapeDensityImage function `sosta` R package adapted. Compared original `sosta` function, version allows use SingleCellExperiment object, used `spatialCoords()`.","code":""},{"path":"https://peicai.github.io/DESpace/reference/FeaturePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FeaturePlot — FeaturePlot","text":"","code":"FeaturePlot(   spe,   feature,   coordinates = NULL,   concave_hull = FALSE,   sf_dim = 200,   assay.type = \"logcounts\",   annotation_cluster = FALSE,   annotation_title = NULL,   platform = \"Visium\",   cluster_col = NULL,   cluster = NULL,   legend_cluster = FALSE,   legend_exprs = FALSE,   diverging = FALSE,   low = NULL,   high = NULL,   mid = NULL,   color = NULL,   linewidth = 0.4,   linecolor = NULL,   label = FALSE,   ncol = 3,   title = FALSE,   title_size = 10,   point_size = 0.5 )"},{"path":"https://peicai.github.io/DESpace/reference/FeaturePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FeaturePlot — FeaturePlot","text":"spe SpatialExperiment SingleCellExperiment. feature specified string, must exist row specified assay spe. feature Feature vector used color cell. May name gene/row assay spe, vector continuous values. coordinates Column names spatial coordinates cells stored colData(spe). specified, coordinates used. , function defaults using 'row' 'col' colData(spe) exist. Otherwise, use spatialCoords(spe) 'spe' SpatialExperiment object spatialCoords(spe) NULL. concave_hull logical value (TRUE FALSE). Visium ST platforms, `concave_hull` automatically set TRUE. TRUE, function uses geom_mark_hull outline cluster boundaries (recommended non-discontinuous clusters). FALSE, adapted reconstructShapeDensityImage used complex cluster shapes. sf_dim numeric value x-dimension reconstruction (default 200). lower value speeds computation reduces accuracy. Used `concave_hull` FALSE. assay.type String indicating assay spe expression vector taken . annotation_cluster logical value. TRUE FALSE. TRUE, annotated spatial clusters plotted alongside expression plots. FALSE, clusters displayed. annotation_title character string title annotated spatial clusters. Applied `annotation_cluster` TRUE. platform character string specifying spatial sequencing platform. \"Visium\" \"ST\", hexagonal spot layout used. Otherwise, points plotted. cluster_col Column name spatial clusters colData(spe). cluster Names spatial clusters used drawing boundary around group points belong specify cluster. can NULL, \"\"/\"\", vector cluster names. legend_cluster logical value. TRUE FALSE, indicating whether plot legend shaped clusters (TRUE), (FALSE). used 'cluster_col' 'cluster' specified, supported 'concave_hull' set TRUE. legend_exprs logical value. TRUE FALSE, indicating whether plot legend expression level (TRUE), (FALSE). diverging logical value. TRUE, uses diverging color gradient FeaturePlot (e.g., fold change). FALSE, uses sequential gradient (e.g., expression). low, mid, high Optional hex codes low, mid, high values color gradient used continuous cell values. color Optional hex code set color borders around cells. Set NA remove borders. linewidth width boundary line around cluster. default ('0.4') size boundary line one. linecolor colors boundary lines around cluster. unspecified, default color scheme used. label logical. TRUE FALSE. Adding label arrow pointing group. ncol dimensions grid create. default, 1, length feature equals 1, 3, otherwise. title logical. TRUE FALSE. true, title name (subplot) gene name. title_size Title font size. point_size Point size.","code":""},{"path":"https://peicai.github.io/DESpace/reference/FeaturePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FeaturePlot — FeaturePlot","text":"Returns ggplot object.","code":""},{"path":[]},{"path":"https://peicai.github.io/DESpace/reference/FeaturePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FeaturePlot — FeaturePlot","text":"","code":"# load the input data: data(\"LIBD_subset\", package = \"DESpace\")  # load pre-computed results (obtained via `svg_test`) data(\"results_svg_test\", package = \"DESpace\")  # Visualize the gene expression of the top three genes feature = results_svg_test$gene_results$gene_id[seq_len(3)] FeaturePlot(LIBD_subset, feature, coordinates = c(\"array_row\", \"array_col\"),             ncol = 3, title = TRUE)"},{"path":"https://peicai.github.io/DESpace/reference/LIBD_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset from the human DLPFC 10x Genomics Visium dataset of the spatialLIBD package — LIBD_subset","title":"Subset from the human DLPFC 10x Genomics Visium dataset of the spatialLIBD package — LIBD_subset","text":"Subset human DLPFC 10x Genomics Visium dataset spatialLIBD package","code":""},{"path":"https://peicai.github.io/DESpace/reference/LIBD_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset from the human DLPFC 10x Genomics Visium dataset of the spatialLIBD package — LIBD_subset","text":"LIBD_subset contains SpatialExperiment-class object, representing subset sample 151673 full real data spatialLIBD package. code used subset original dataset.","code":""},{"path":"https://peicai.github.io/DESpace/reference/LIBD_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset from the human DLPFC 10x Genomics Visium dataset of the spatialLIBD package — LIBD_subset","text":"spatial experiment object","code":""},{"path":[]},{"path":"https://peicai.github.io/DESpace/reference/LIBD_subset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Subset from the human DLPFC 10x Genomics Visium dataset of the spatialLIBD package — LIBD_subset","text":"Peiying Cai peiying.cai@uzh.ch, Simone Tiberi simone.tiberi@unibo.","code":""},{"path":"https://peicai.github.io/DESpace/reference/LIBD_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset from the human DLPFC 10x Genomics Visium dataset of the spatialLIBD package — LIBD_subset","text":"","code":"# Connect to ExperimentHub # ehub <- ExperimentHub::ExperimentHub() # Download the example spe data # spe_all <- spatialLIBD::fetch_data(type = \"spe\", eh = ehub) # Select one sample only: # LIBD_subset <- spe_all[, colData(spe_all)$sample_id == '151673'] # Select small set of random genes for faster runtime  # set.seed(123) # sel_genes <- sample(dim(LIBD_subset)[1],500) # LIBD_subset <- LIBD_subset[sel_genes,] # keep_col <- c(\"array_row\",\"array_col\",\"layer_guess_reordered\") # library(SingleCellExperiment) # LIBD_subset <- SpatialExperiment(assay = list(counts = assay(LIBD_subset), #                                               logcounts = logcounts(LIBD_subset)),  #                                  colData = colData(LIBD_subset)[keep_col]) # save(LIBD_subset, file = \"./DESpace/data/LIBD_subset.RData\")"},{"path":"https://peicai.github.io/DESpace/reference/dsp_test.html","id":null,"dir":"Reference","previous_headings":"","what":"dsp_test — dsp_test","title":"dsp_test — dsp_test","text":"'dsp_test' identifies differential spatial pattern (DSP) genes conditions spatially-resolved transcriptomics data, provided spatial clusters available.","code":""},{"path":"https://peicai.github.io/DESpace/reference/dsp_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dsp_test — dsp_test","text":"","code":"dsp_test(   spe,   design = NULL,   cluster_col,   sample_col,   condition_col,   min_counts = 20,   min_non_zero_spots = 10,   min_pct_cells = 0.5,   filter_gene = FALSE,   filter_cluster = TRUE,   verbose = FALSE )"},{"path":"https://peicai.github.io/DESpace/reference/dsp_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dsp_test — dsp_test","text":"spe SpatialExperiment SingleCellExperiment. design Matrix array. Numeric design matrix regression-like model created `model.matrix` function. cluster_col Character. Column name spatial clusters colData(spe). sample_col Character. Column name sample ids colData(spe). Sample ids must either factor character. condition_col Character. Column name condition ids colData(spe). min_counts Numeric. Minimum number counts per sample (across spots) gene analyzed. min_non_zero_spots Numeric. Minimum number non-zero spots per sample, gene analyzed. min_pct_cells Numeric. Minimum percentage cells required cluster included analysis across specified conditions. Default value 0.5 (.e., 0.5% total cells per cluster per condition). filter_gene Logical. TRUE, dsp_test filters genes requiring expressed least 'min_non_zero_spots' cells least 'min_counts'  counts per sample across locations. filter_cluster Logical. set TRUE, dsp_test excludes clusters insufficiently represented dataset. clusters meeting 'min_pct_cells' threshold (.e., containing least specified percentage cells across conditions) retained analysis. verbose Logical. TRUE, svg_test returns two results: 'DGEGLM' 'DGELRT' objects contain full statistics 'edgeR::glmFit' 'edgeR::glmLRT'.","code":""},{"path":"https://peicai.github.io/DESpace/reference/dsp_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dsp_test — dsp_test","text":"list results: - \"gene_results\": dataframe contains main edgeR test results; - \"estimated_y\": DGEList object contains estimated common dispersion, can later used speed-calculation testing individual clusters. - \"glmFit\" (verbose = TRUE): DGEGLM object contains full statistics \"edgeR::glmFit\". - \"glmLRT\" (verbose = TRUE): DGELRT object contains full statistics \"edgeR::glmLRT\".","code":""},{"path":[]},{"path":"https://peicai.github.io/DESpace/reference/dsp_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dsp_test — dsp_test","text":"","code":"## Load the example multi-sample multi-group spe object spe <- muSpaData::Wei22_example() #>  #> see ?muSpaData and browseVignettes('muSpaData') for documentation #> downloading 1 resources #> retrieving 1 resource #>  #> loading from cache #> require(“SpatialExperiment”) # Fit the model via \\code{\\link{dsp_test}} function. set.seed(123) results_dsp <- dsp_test(spe = spe,                         cluster_col = \"Banksy_smooth\",                         sample_col = \"sample_id\",                         condition_col = \"condition\",                         verbose = FALSE) #> Using 'dsp_test' for spatial variable pattern genes detection. #> Filter low quality clusters:  #> Cluster levels to keep: 0, 1, 2, 3, 4 #> Design model: row names represent sample names, followed by underscores and cluster names. #>          (Intercept) condition20DPI condition2DPI cluster_id1 cluster_id2 #> 2DPI_1_0           1              0             1           0           0 #> 2DPI_2_0           1              0             1           0           0 #>          cluster_id3 cluster_id4 condition20DPI:cluster_id1 #> 2DPI_1_0           0           0                          0 #> 2DPI_2_0           0           0                          0 #>          condition2DPI:cluster_id1 condition20DPI:cluster_id2 #> 2DPI_1_0                         0                          0 #> 2DPI_2_0                         0                          0 #>          condition2DPI:cluster_id2 condition20DPI:cluster_id3 #> 2DPI_1_0                         0                          0 #> 2DPI_2_0                         0                          0 #>          condition2DPI:cluster_id3 condition20DPI:cluster_id4 #> 2DPI_1_0                         0                          0 #> 2DPI_2_0                         0                          0 #>          condition2DPI:cluster_id4 #> 2DPI_1_0                         0 #> 2DPI_2_0                         0  # dsp_test returns of an object: # \"gene_results\": a dataframe contains main edgeR test results.  # We visualize differential results: head(results_dsp, 3) #>                       gene_id logFC.condition20DPI.cluster_id1 #> AMEX60DD014721 AMEX60DD014721                      -0.07164635 #> AMEX60DD045083 AMEX60DD045083                       0.08745636 #> AMEX60DD011151 AMEX60DD011151                      -0.97427030 #>                logFC.condition2DPI.cluster_id1 logFC.condition20DPI.cluster_id2 #> AMEX60DD014721                      -0.3898630                       -0.8509553 #> AMEX60DD045083                       0.5417202                       -1.3379152 #> AMEX60DD011151                      -2.1021922                        0.1858888 #>                logFC.condition2DPI.cluster_id2 logFC.condition20DPI.cluster_id3 #> AMEX60DD014721                       0.8526198                       -0.8327653 #> AMEX60DD045083                       1.1227184                        0.2479755 #> AMEX60DD011151                       0.4670452                       -0.4015208 #>                logFC.condition2DPI.cluster_id3 logFC.condition20DPI.cluster_id4 #> AMEX60DD014721                      -0.9450822                       0.22292996 #> AMEX60DD045083                       1.2663910                      -0.99664679 #> AMEX60DD011151                       0.4085178                      -0.01664598 #>                logFC.condition2DPI.cluster_id4   logCPM        LR       PValue #> AMEX60DD014721                       0.2085998 9.344907 102.25832 1.473888e-18 #> AMEX60DD045083                      -0.7966179 7.505402  95.35246 3.791697e-17 #> AMEX60DD011151                       0.1808006 7.959492  83.09107 1.164512e-14 #>                         FDR #> AMEX60DD014721 7.369440e-15 #> AMEX60DD045083 9.479243e-14 #> AMEX60DD011151 1.940854e-11"},{"path":"https://peicai.github.io/DESpace/reference/individual_dsp.html","id":null,"dir":"Reference","previous_headings":"","what":"individual_dsp — individual_dsp","title":"individual_dsp — individual_dsp","text":"DESpace can also used reveal specific areas tissue affected DSP genes; .e., spatial clusters particularly /abundant compared average signal across conditions. function can used identify SVGs among conditions individual cluster.","code":""},{"path":"https://peicai.github.io/DESpace/reference/individual_dsp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"individual_dsp — individual_dsp","text":"","code":"individual_dsp(   spe,   cluster_col,   sample_col,   condition_col,   min_counts = 20,   min_non_zero_spots = 10,   min_pct_cells = 0.5,   filter_gene = TRUE,   filter_cluster = TRUE )"},{"path":"https://peicai.github.io/DESpace/reference/individual_dsp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"individual_dsp — individual_dsp","text":"spe SpatialExperiment SingleCellExperiment. cluster_col Character. Column name spatial clusters colData(spe). sample_col Character. Column name sample ids colData(spe). Sample ids must either factor character. condition_col Character. Column name condition ids colData(spe). min_counts Numeric. Minimum number counts per sample (across spots) gene analyzed. min_non_zero_spots Numeric. Minimum number non-zero spots per sample, gene analyzed. min_pct_cells Numeric. Minimum percentage cells required cluster included analysis across specified conditions. Default value 0.5 (.e., 0.5% total cells per cluster per condition). filter_gene Logical. TRUE, dsp_test filters genes: genes expressed least 'min_non_zero_spots' spots, gene requires least 'min_counts' counts per sample (across locations). filter_cluster Logical. set TRUE, dsp_test excludes clusters insufficiently represented dataset. clusters meeting 'min_pct_cells' threshold (.e., containing least specified percentage cells across conditions) retained analysis.","code":""},{"path":"https://peicai.github.io/DESpace/reference/individual_dsp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"individual_dsp — individual_dsp","text":"list results, one result per spatial cluster element. Specifically, item list \"gene_results\" dataframe contains main edgeR test results.","code":""},{"path":[]},{"path":"https://peicai.github.io/DESpace/reference/individual_dsp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"individual_dsp — individual_dsp","text":"","code":"# load the input data: spe <- muSpaData::Wei22_example() #> see ?muSpaData and browseVignettes('muSpaData') for documentation #> loading from cache set.seed(123) results_individual_dsp <- individual_dsp(spe,                                           cluster_col = \"Banksy_smooth\",                                           sample_col = \"sample_id\",                                           condition_col = \"condition\") #> Filter low quality genes:  #> min_counts = 20; min_non_zero_spots = 10. #> The number of genes that pass filtering is 5000. #> Conducting tests for layer '0' against all other layers. #> Design model: row names represent sample names, followed by underscores and cluster names. #>              (Intercept) condition20DPI condition2DPI cluster_id0 #> 2DPI_1_Other           1              0             1           0 #> 2DPI_2_Other           1              0             1           0 #>              condition20DPI:cluster_id0 condition2DPI:cluster_id0 #> 2DPI_1_Other                          0                         0 #> 2DPI_2_Other                          0                         0 #> Conducting tests for layer '1' against all other layers. #> Design model: row names represent sample names, followed by underscores and cluster names. #>              (Intercept) condition20DPI condition2DPI cluster_id1 #> 2DPI_1_Other           1              0             1           0 #> 2DPI_2_Other           1              0             1           0 #>              condition20DPI:cluster_id1 condition2DPI:cluster_id1 #> 2DPI_1_Other                          0                         0 #> 2DPI_2_Other                          0                         0 #> Conducting tests for layer '2' against all other layers. #> Design model: row names represent sample names, followed by underscores and cluster names. #>              (Intercept) condition20DPI condition2DPI cluster_id2 #> 2DPI_1_Other           1              0             1           0 #> 2DPI_2_Other           1              0             1           0 #>              condition20DPI:cluster_id2 condition2DPI:cluster_id2 #> 2DPI_1_Other                          0                         0 #> 2DPI_2_Other                          0                         0 #> Conducting tests for layer '3' against all other layers. #> Design model: row names represent sample names, followed by underscores and cluster names. #>              (Intercept) condition20DPI condition2DPI cluster_id3 #> 2DPI_1_Other           1              0             1           0 #> 2DPI_2_Other           1              0             1           0 #>              condition20DPI:cluster_id3 condition2DPI:cluster_id3 #> 2DPI_1_Other                          0                         0 #> 2DPI_2_Other                          0                         0 #> Conducting tests for layer '4' against all other layers. #> Design model: row names represent sample names, followed by underscores and cluster names. #>              (Intercept) condition20DPI condition2DPI cluster_id4 #> 2DPI_1_Other           1              0             1           0 #> 2DPI_2_Other           1              0             1           0 #>              condition20DPI:cluster_id4 condition2DPI:cluster_id4 #> 2DPI_1_Other                          0                         0 #> 2DPI_2_Other                          0                         0 #> Returning results                                             # We visualize results for the cluster '3' results <- results_individual_dsp[['3']] head(results,3) #>                       gene_id logFC.condition20DPI.cluster_id3 #> AMEX60DD005921 AMEX60DD005921                       -0.4164827 #> AMEX60DD002984 AMEX60DD002984                        1.6438569 #> AMEX60DD009927 AMEX60DD009927                       -0.8606468 #>                logFC.condition2DPI.cluster_id3   logCPM       LR       PValue #> AMEX60DD005921                        1.724158 5.262614 38.40390 4.578235e-09 #> AMEX60DD002984                        1.295172 7.473809 37.27289 8.059245e-09 #> AMEX60DD009927                       -1.483183 8.534270 33.14959 6.333698e-08 #>                         FDR #> AMEX60DD005921 2.014811e-05 #> AMEX60DD002984 2.014811e-05 #> AMEX60DD009927 1.055616e-04"},{"path":"https://peicai.github.io/DESpace/reference/individual_svg.html","id":null,"dir":"Reference","previous_headings":"","what":"individual_svg — individual_svg","title":"individual_svg — individual_svg","text":"DESpace can also used reveal specific areas tissue affected SVGs; .e., spatial clusters particularly /abundant compared average signal. function can used identify SVGs individual cluster.","code":""},{"path":"https://peicai.github.io/DESpace/reference/individual_svg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"individual_svg — individual_svg","text":"","code":"individual_svg(   spe,   cluster_col,   sample_col = \"sample_id\",   edgeR_y = NULL,   min_counts = 20,   min_non_zero_spots = 10,   filter_gene = TRUE,   replicates = FALSE,   BPPARAM = NULL )"},{"path":"https://peicai.github.io/DESpace/reference/individual_svg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"individual_svg — individual_svg","text":"spe SpatialExperiment SingleCellExperiment. cluster_col Column name spatial clusters colData(spe). sample_col Column name sample ids colData(spe). edgeR_y Pre-estimated dispersion; null, compute dispersion. min_counts Minimum number counts per sample (across spots) gene analyzed. min_non_zero_spots Minimum number non-zero spots per sample, gene analyzed. filter_gene logical. TRUE, svg_test filters genes: genes expressed least 'min_non_zero_spots' spots, gene requires least 'min counts' counts per sample (across locations). replicates Single sample multi-sample test. BPPARAM optional parameter passed internally bplapply. suggest using many cores number spatial clusters. unspecified, script run parallel. Note parallel coding performs better dispersion estimations provided beforehand. Moreover, parallelizing script increase memory requirement; memory issue, leave 'BPPARAM' unspecified , hence, avoid parallelization.","code":""},{"path":"https://peicai.github.io/DESpace/reference/individual_svg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"individual_svg — individual_svg","text":"list results, one result per spatial cluster element. Specifically, item list \"gene_results\" dataframe contains main edgeR test results.","code":""},{"path":"https://peicai.github.io/DESpace/reference/individual_svg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"individual_svg — individual_svg","text":"every spatial cluster test, edgeR normally re-compute dispersion estimates based specific design test. However, calculation represents majority overall computing time. Therefore, speed-calculations, propose use dispersion estimates previously computed gene-level tests. introduces minor approximation , benchmarks, lead decreased accuracy. want use pre-computed gene-level dispersion estimates, set edgeR_y 'estimated_y'. Alternatively, want re-compute dispersion estimates (significantly slower, marginally accurate option), leave edgeR_y empty.","code":""},{"path":[]},{"path":"https://peicai.github.io/DESpace/reference/individual_svg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"individual_svg — individual_svg","text":"","code":"# load the input data: data(\"LIBD_subset\", package = \"DESpace\") LIBD_subset #> class: SpatialExperiment  #> dim: 500 3639  #> metadata(0): #> assays(2): counts logcounts #> rownames(500): ENSG00000282097 ENSG00000225129 ... ENSG00000267199 #>   ENSG00000273129 #> rowData names(0): #> colnames(3639): AAACAAGTATCTCCCA-1 AAACAATCTACTAGCA-1 ... #>   TTGTTTGTATTACACG-1 TTGTTTGTGTAAATTC-1 #> colData names(4): array_row array_col layer_guess_reordered sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(0) : #> imgData names(0):  # load pre-computed results (obtaines via `svg_test`) data(\"results_svg_test\", package = \"DESpace\")  # svg_test returns of a list of 2 objects: # \"gene_results\": a dataframe contains main edgeR test results; # \"estimated_y\": a DGEList object contains the estimated common dispersion,  #  which can later be used to speed-up calculation when testing individual clusters.  # We visualize differential results: head(results_svg_test$gene_results, 3) #>                         gene_id        LR   logCPM        PValue           FDR #> ENSG00000115756 ENSG00000115756 1073.3689 15.89723 1.204871e-228 2.855545e-226 #> ENSG00000054690 ENSG00000054690 1056.7744 15.48088 4.686692e-225 5.553730e-223 #> ENSG00000111716 ENSG00000111716  752.4418 16.58993 2.894030e-159 2.286283e-157  # Individual cluster test: identify SVGs for each individual cluster # set parallel computing; we suggest using as many cores as the number of spatial clusters. # Note that parallelizing the script will increase the memory requirement; # if memory is an issue, leave 'BPPARAM' unspecified and, hence, avoid parallelization. set.seed(123) results_individual_svg <- individual_svg(LIBD_subset,                                           edgeR_y = results_svg_test$estimated_y,                                           cluster_col = \"layer_guess_reordered\") #> Filter low quality genes:  #> min_counts = 20; min_non_zero_spots = 10. #> The number of genes that pass filtering is237. #> Pre-processing #> Start modeling #> Returning results                                             # We visualize results for the cluster 'WM' results_WM <- results_individual_svg[[7]] head(results_WM,3) #>                         gene_id       LR   logCPM     logFC        PValue #> ENSG00000054690 ENSG00000054690 978.6555 15.48088  2.346996 7.831449e-215 #> ENSG00000166086 ENSG00000166086 572.4992 15.47657  1.845724 1.605722e-126 #> ENSG00000111716 ENSG00000111716 409.7061 16.58993 -1.079196  4.247092e-91 #>                           FDR #> ENSG00000054690 1.856053e-212 #> ENSG00000166086 1.902780e-124 #> ENSG00000111716  3.355203e-89"},{"path":"https://peicai.github.io/DESpace/reference/results_individual_svg.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from individual_svg function — results_individual_svg","title":"Results from individual_svg function — results_individual_svg","text":"Results individual_svg function","code":""},{"path":"https://peicai.github.io/DESpace/reference/results_individual_svg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Results from individual_svg function — results_individual_svg","text":"results_individual_svg contains list object, results obtained applying individual_svg function external dataset spatialLIBD package. code used obtain 'results_individual_svg'.","code":""},{"path":"https://peicai.github.io/DESpace/reference/results_individual_svg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Results from individual_svg function — results_individual_svg","text":"List 7 elements - one element spatial cluster","code":""},{"path":[]},{"path":"https://peicai.github.io/DESpace/reference/results_individual_svg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Results from individual_svg function — results_individual_svg","text":"Peiying Cai peiying.cai@uzh.ch, Simone Tiberi simone.tiberi@unibo.","code":""},{"path":"https://peicai.github.io/DESpace/reference/results_individual_svg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Results from individual_svg function — results_individual_svg","text":"","code":"# load the input data: # data(\"LIBD_subset\", package = \"DESpace\") # LIBD_subset # load pre-computed results (obtained via `svg_test`) # data(\"results_svg_test\", package = \"DESpace\") # results_svg_test  # Function `individual_svg()` can be used to identify SVGs for each individual cluster. # Parameter `spatial_cluster` indicates the column names of `colData(spe)`  # containing spatial clusters. # set.seed(123) # results_individual_svg <- individual_svg(LIBD_subset, #                                            edgeR_y = results_svg_test$estimated_y, #                                            spatial_cluster = \"layer_guess_reordered\") # save(results_individual_svg, file = \"./DESpace/data/results_individual_svg.RData\")"},{"path":"https://peicai.github.io/DESpace/reference/results_svg_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from svg_test function — results_svg_test","title":"Results from svg_test function — results_svg_test","text":"Results svg_test function","code":""},{"path":"https://peicai.github.io/DESpace/reference/results_svg_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Results from svg_test function — results_svg_test","text":"results_svg_test contains list object, results obtained applying svg_test function external dataset spatialLIBD package. code used obtain 'results_svg_test'.","code":""},{"path":"https://peicai.github.io/DESpace/reference/results_svg_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Results from svg_test function — results_svg_test","text":"Large List 2 elements: - \"gene_results\": dataframe contains main edgeR test results; - \"estimated_y\": DGEList object contains estimated common dispersion,","code":""},{"path":[]},{"path":"https://peicai.github.io/DESpace/reference/results_svg_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Results from svg_test function — results_svg_test","text":"Peiying Cai peiying.cai@uzh.ch, Simone Tiberi simone.tiberi@unibo.","code":""},{"path":"https://peicai.github.io/DESpace/reference/results_svg_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Results from svg_test function — results_svg_test","text":"","code":"# load the input data: # data(\"LIBD_subset\", package = \"DESpace\") # LIBD_subset #  # Fit the model via `svg_test` function.  # Parameter `spe` specifies the input `SpatialExperiment` or `SingleCellExperiment` object,  # while `cluster_col` defines the column names of `colData(spe)` containing spatial clusters.  # To obtain all statistics, set `verbose` to `TRUE`. #  # set.seed(123) # results_svg_test <- svg_test(spe = LIBD_subset, #                                          cluster_col = \"layer_guess_reordered\", #                                          verbose = FALSE) #  # save(results_svg_test, file = \"./DESpace/data/results_svg_test.RData\")"},{"path":"https://peicai.github.io/DESpace/reference/svg_test.html","id":null,"dir":"Reference","previous_headings":"","what":"svg_test — svg_test","title":"svg_test — svg_test","text":"'svg_test' identifies spatially variable genes (SVGs) spatially-resolved transcriptomics data, provided spatial clusters available.","code":""},{"path":"https://peicai.github.io/DESpace/reference/svg_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"svg_test — svg_test","text":"","code":"svg_test(   spe,   cluster_col,   sample_col = NULL,   replicates = FALSE,   min_counts = 20,   min_non_zero_spots = 10,   filter_gene = TRUE,   verbose = FALSE )"},{"path":"https://peicai.github.io/DESpace/reference/svg_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"svg_test — svg_test","text":"spe SpatialExperiment SingleCellExperiment. cluster_col Column name spatial clusters colData(spe). sample_col Column name sample ids colData(spe). replicates logical, indicating whether biological replicates provided (TRUE) (FALSE). biological replicates provided, svg_test performs joint test across replicates, searching SVGs consistent spatial patterns across samples. min_counts Minimum number counts per sample (across spots) gene analyzed. min_non_zero_spots Minimum number non-zero spots per sample, gene analyzed. filter_gene logical. TRUE, svg_test filters genes: genes expressed least 'min_non_zero_spots' spots, gene requires least 'min counts' counts per sample (across locations). verbose logical. TRUE, svg_test returns two results: 'DGEGLM' 'DGELRT' objects contain full statistics 'edgeR::glmFit' 'edgeR::glmLRT'.","code":""},{"path":"https://peicai.github.io/DESpace/reference/svg_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"svg_test — svg_test","text":"list results: - \"gene_results\": dataframe contains main edgeR test results; - \"estimated_y\": DGEList object contains estimated common dispersion, can later used speed-calculation testing individual clusters. - \"glmFit\" (verbose = TRUE): DGEGLM object contains full statistics \"edgeR::glmFit\". - \"glmLRT\" (verbose = TRUE): DGELRT object contains full statistics \"edgeR::glmLRT\".","code":""},{"path":"https://peicai.github.io/DESpace/reference/svg_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"svg_test — svg_test","text":"'sample_col' specified 'replicates == FALSE', svg_test assumed data comes individual sample, performs SV testing . 'sample_col' provided 'replicates == FALSE', svg_test tests sample individually returns list results sample. 'sample_col' provided 'replicates == TRUE', svg_test performs joint multi-sample test.","code":""},{"path":[]},{"path":"https://peicai.github.io/DESpace/reference/svg_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"svg_test — svg_test","text":"","code":"# load the input data: data(\"LIBD_subset\", package = \"DESpace\") LIBD_subset #> class: SpatialExperiment  #> dim: 500 3639  #> metadata(0): #> assays(2): counts logcounts #> rownames(500): ENSG00000282097 ENSG00000225129 ... ENSG00000267199 #>   ENSG00000273129 #> rowData names(0): #> colnames(3639): AAACAAGTATCTCCCA-1 AAACAATCTACTAGCA-1 ... #>   TTGTTTGTATTACACG-1 TTGTTTGTGTAAATTC-1 #> colData names(4): array_row array_col layer_guess_reordered sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(0) : #> imgData names(0):  # Fit the model via \\code{\\link{svg_test}} function. set.seed(123) results_svg_test <- svg_test(spe = LIBD_subset,                              cluster_col = \"layer_guess_reordered\",                              verbose = FALSE) #> using 'svg_test' for spatial gene/pattern detection. #> Filter low quality genes:  #> min_counts = 20; min_non_zero_spots = 10. #> The number of genes that pass filtering is 237. #> single sample test  # svg_test returns of a list of 2 objects: # \"gene_results\": a dataframe contains main edgeR test results; # \"estimated_y\": a DGEList object contains the estimated common dispersion,  #  which can later be used to speed-up calculation when testing individual clusters.  # We visualize differential results: head(results_svg_test$gene_results, 3) #>                         gene_id        LR   logCPM        PValue           FDR #> ENSG00000115756 ENSG00000115756 1064.0552 15.89723 1.246863e-226 2.955065e-224 #> ENSG00000054690 ENSG00000054690 1053.5156 15.48088 2.375929e-224 2.815476e-222 #> ENSG00000111716 ENSG00000111716  752.3436 16.58993 3.038878e-159 2.400714e-157"},{"path":"https://peicai.github.io/DESpace/reference/top_results.html","id":null,"dir":"Reference","previous_headings":"","what":"top_results — top_results","title":"top_results — top_results","text":"Filter significant results. top_results returns significant results obtained via svg_test individual_svg. can also used merge gene- cluster-level results single object.","code":""},{"path":"https://peicai.github.io/DESpace/reference/top_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"top_results — top_results","text":"","code":"top_results(   gene_results = NULL,   cluster_results,   cluster = NULL,   select = \"both\",   high_low = NULL )"},{"path":"https://peicai.github.io/DESpace/reference/top_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"top_results — top_results","text":"gene_results Results returned svg_test. cluster_results Results returned individual_svg. cluster character indicating cluster(s) whose results returned. Results clusters returned default (\"NULL\"). select character indicating results returned (\"FDR\", \"logFC\", \"\"). used \"cluster_results\" provided. default (\"\"), FDR logFC returned. high_low character indicating whether filter results . used \"cluster_results\" provided, one cluster specified \"cluster\" parameter. default (NULL), results returned single data.frame. \"high\" \"HIGH\", return SVGs average abundace \"cluster\" higher rest tissue (.e., logFC > 0). \"low\" \"LOW\", return SVGs average abundace \"cluster\" lower rest tissue (.e., logFC < 0). \"\" \"\", \"high\" \"low\" results returned, two separate data.frames.","code":""},{"path":"https://peicai.github.io/DESpace/reference/top_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"top_results — top_results","text":"data.frame object list data.frame results. - “cluster_results” provided, results reported data.frame columns  gene names (gene_id), spatial clusters affected SV (Cluster), cluster-specific likelihood ratio test statistics (LR),  cluster-specific average (across spots) log-2 counts per million (logCPM), cluster-specific log2-fold changes (logFC),  cluster-specific raw p-values (PValue), Benjamini-Hochberg adjusted p-values (FDR) spatial cluster. - “gene_results” “cluster_results” given, results reported data.frame merges gene-  cluster-level results. - “cluster” specified, function returns subset data.frame given cluster, contains cluster name,  gene name, LR, logCPM, logFC, PValue FDR, ordered FDR specified cluster. - “high_low” set, function returns list data.frame contains subsets results genes  higher /lower expression given cluster compared rest tissue.","code":""},{"path":[]},{"path":"https://peicai.github.io/DESpace/reference/top_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"top_results — top_results","text":"","code":"# load pre-computed results (obtained via `svg_test`) data(\"results_svg_test\", package = \"DESpace\")  # svg_test returns of a list of 2 objects: # \"gene_results\": a dataframe contains main edgeR test results; # \"estimated_y\": a DGEList object contains the estimated common dispersion,  #  which can later be used to speed-up calculation when testing individual clusters.  # We visualize differential results: head(results_svg_test$gene_results, 3) #>                         gene_id        LR   logCPM        PValue           FDR #> ENSG00000115756 ENSG00000115756 1073.3689 15.89723 1.204871e-228 2.855545e-226 #> ENSG00000054690 ENSG00000054690 1056.7744 15.48088 4.686692e-225 5.553730e-223 #> ENSG00000111716 ENSG00000111716  752.4418 16.58993 2.894030e-159 2.286283e-157  # load pre-computed results (obtained via `individual_svg`) data(\"results_individual_svg\", package = \"DESpace\") # Function `individual_svg()` can be used to identify SVGs for each individual cluster. # `individual_svg()` returns a list containing the results of individual clusters. # For each cluster, results are reported as a data.frame,  # where columns For each cluster, results are reported as a data.frame,  # where columns contain gene names (`genes`), likelihood ratio (`LR`),  # log2-fold changes (`logFC`) and adjusted p-value (`FDR`). #  # Combine gene-and cluster-level results merge_res = top_results(results_svg_test$gene_results,                          results_individual_svg) head(merge_res,3) #>           gene_id   gene_LR gene_logCPM   gene_Pvalue      gene_FDR #> 1 ENSG00000115756 1073.3689    15.89723 1.204871e-228 2.855545e-226 #> 2 ENSG00000054690 1056.7744    15.48088 4.686692e-225 5.553730e-223 #> 3 ENSG00000111716  752.4418    16.58993 2.894030e-159 2.286283e-157 #>     Layer1_FDR    Layer2_FDR   Layer3_FDR   Layer4_FDR   Layer5_FDR #> 1 8.177323e-07 9.097439e-117 1.298693e-42 2.954756e-16 1.287636e-48 #> 2 2.458083e-15  2.905948e-06 6.466892e-44 8.444596e-07 9.986696e-17 #> 3 4.260477e-47  2.227331e-01 4.739143e-26 8.444596e-07 5.775841e-15 #>     Layer6_FDR        WM_FDR Layer1_logFC Layer2_logFC Layer3_logFC #> 1 1.163469e-07  1.087300e-37    0.6095577   -1.6910482   -0.7174741 #> 2 1.960661e-01 1.856053e-212    1.4127189    0.7519805    1.1098266 #> 3 1.750846e-02  3.355203e-89    1.2238140   -0.1102450   -0.3652317 #>   Layer4_logFC Layer5_logFC Layer6_logFC  WM_logFC #> 1    1.0572344    1.0578709    0.3909357 -1.067597 #> 2    0.8599344    0.7981348    0.1633057  2.346996 #> 3   -0.3473850   -0.3200502    0.1242379 -1.079196 # 'select = \"FDR\"' can be used to visualize adjusted p-values for each spatial cluster. merge_res = top_results(results_svg_test$gene_results,                          results_individual_svg, select = \"FDR\") head(merge_res,3) #>           gene_id   gene_LR gene_logCPM   gene_Pvalue      gene_FDR #> 1 ENSG00000115756 1073.3689    15.89723 1.204871e-228 2.855545e-226 #> 2 ENSG00000054690 1056.7744    15.48088 4.686692e-225 5.553730e-223 #> 3 ENSG00000111716  752.4418    16.58993 2.894030e-159 2.286283e-157 #>     Layer1_FDR    Layer2_FDR   Layer3_FDR   Layer4_FDR   Layer5_FDR #> 1 8.177323e-07 9.097439e-117 1.298693e-42 2.954756e-16 1.287636e-48 #> 2 2.458083e-15  2.905948e-06 6.466892e-44 8.444596e-07 9.986696e-17 #> 3 4.260477e-47  2.227331e-01 4.739143e-26 8.444596e-07 5.775841e-15 #>     Layer6_FDR        WM_FDR #> 1 1.163469e-07  1.087300e-37 #> 2 1.960661e-01 1.856053e-212 #> 3 1.750846e-02  3.355203e-89 # Specify the cluster of interest and check top genes detected by svg_test. results_WM_both = top_results(cluster_results = results_individual_svg,                                cluster = \"WM\", high_low = \"both\") head(results_WM_both$high_genes, 3) #>                 Cluster         gene_id Cluster_LR Cluster_logCPM Cluster_logFC #> ENSG00000054690      WM ENSG00000054690   978.6555       15.48088      2.346996 #> ENSG00000166086      WM ENSG00000166086   572.4992       15.47657      1.845724 #> ENSG00000117266      WM ENSG00000117266   376.6276       15.46008      1.588379 #>                 Cluster_PValue   Cluster_FDR #> ENSG00000054690  7.831449e-215 1.856053e-212 #> ENSG00000166086  1.605722e-126 1.902780e-124 #> ENSG00000117266   6.748199e-84  3.998308e-82 head(results_WM_both$low_genes, 3) #>                 Cluster         gene_id Cluster_LR Cluster_logCPM Cluster_logFC #> ENSG00000111716      WM ENSG00000111716   409.7061       16.58993     -1.079196 #> ENSG00000063180      WM ENSG00000063180   258.4652       16.10214     -1.064478 #> ENSG00000135940      WM ENSG00000135940   242.9055       16.88763     -0.693015 #>                 Cluster_PValue  Cluster_FDR #> ENSG00000111716   4.247092e-91 3.355203e-89 #> ENSG00000063180   3.707311e-58 1.757266e-56 #> ENSG00000135940   9.145322e-55 3.612402e-53"}]
